"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("./GenUtils"));
var _MoneroError = _interopRequireDefault(require("./MoneroError"));
var _ThreadPool = _interopRequireDefault(require("./ThreadPool"));
var _path = _interopRequireDefault(require("path"));

/**
 * Collection of helper utilities for the library.
 */
class LibraryUtils {

  // static variables
  static LOG_LEVEL = 0;





  static WORKER_DIST_PATH_DEFAULT = _GenUtils.default.isBrowser() ? "/monero_web_worker.js" : function () {

    // get worker path in dist (assumes library is running from src or dist)
    let curPath = _path.default.normalize(__dirname);
    const targetPath = _path.default.join('monero-ts', 'dist');
    if (!curPath.includes(targetPath)) curPath = _path.default.join(curPath, "../../../../dist/src/main/js/common");
    return LibraryUtils.prefixWindowsPath(_path.default.join(curPath, "./MoneroWebWorker.js"));
  }();
  static WORKER_DIST_PATH = LibraryUtils.WORKER_DIST_PATH_DEFAULT;

  /**
   * Log a message.
   *
   * @param {number} level - log level of the message
   * @param {string} msg - message to log
   */
  static log(level, msg) {
    (0, _assert.default)(level === parseInt(level, 10) && level >= 0, "Log level must be an integer >= 0");
    if (LibraryUtils.LOG_LEVEL >= level) console.log(msg);
  }

  /**
   * Set the library's log level with 0 being least verbose.
   *
   * @param {number} level - the library's log level
   */
  static async setLogLevel(level) {
    (0, _assert.default)(level === parseInt(level, 10) && level >= 0, "Log level must be an integer >= 0");
    LibraryUtils.LOG_LEVEL = level;
    if (LibraryUtils.WASM_MODULE) LibraryUtils.WASM_MODULE.set_log_level(level);
    if (LibraryUtils.WORKER) await LibraryUtils.invokeWorker(undefined, "setLogLevel", [level]);
  }

  /**
   * Get the library's log level.
   *
   * @return {number} the library's log level
   */
  static getLogLevel() {
    return LibraryUtils.LOG_LEVEL;
  }

  /**
   * Get the total memory used by WebAssembly.
   * 
   * @return {Promise<number>} the total memory used by WebAssembly
   */
  static async getWasmMemoryUsed() {
    let total = 0;
    if (LibraryUtils.WORKER) total += await LibraryUtils.invokeWorker(undefined, "getWasmMemoryUsed", []);
    if (LibraryUtils.getWasmModule() && LibraryUtils.getWasmModule().HEAP8) total += LibraryUtils.getWasmModule().HEAP8.length;
    return total;
  }

  /**
   * Get the WebAssembly module in the current context (nodejs, browser main thread or worker).
   */
  static getWasmModule() {
    return LibraryUtils.WASM_MODULE;
  }

  /**
   * Load the WebAssembly keys module with caching.
   */
  static async loadKeysModule() {

    // use cache if suitable, full module supersedes keys module because it is superset
    if (LibraryUtils.WASM_MODULE) return LibraryUtils.WASM_MODULE;

    // load module
    let module = await require("../../../../dist/monero_wallet_keys")();
    LibraryUtils.WASM_MODULE = module;
    delete LibraryUtils.WASM_MODULE.then;
    LibraryUtils.initWasmModule(LibraryUtils.WASM_MODULE);
    return module;
  }

  /**
   * Load the WebAssembly full module with caching.
   * 
   * The full module is a superset of the keys module and overrides it.
   * 
   * TODO: this is separate static function from loadKeysModule() because webpack cannot bundle worker using runtime param for conditional import
   */
  static async loadFullModule() {

    // use cache if suitable, full module supersedes keys module because it is superset
    if (LibraryUtils.WASM_MODULE && LibraryUtils.FULL_LOADED) return LibraryUtils.WASM_MODULE;

    // load module
    let module = await require("../../../../dist/monero_wallet_full")();
    LibraryUtils.WASM_MODULE = module;
    delete LibraryUtils.WASM_MODULE.then;
    LibraryUtils.FULL_LOADED = true;
    LibraryUtils.initWasmModule(LibraryUtils.WASM_MODULE);
    return module;
  }

  /**
   * Register a function by id which informs if unauthorized requests (e.g.
   * self-signed certificates) should be rejected.
   * 
   * @param {string} fnId - unique identifier for the function
   * @param {function} fn - function to inform if unauthorized requests should be rejected
   */
  static setRejectUnauthorizedFn(fnId, fn) {
    if (!LibraryUtils.REJECT_UNAUTHORIZED_FNS) LibraryUtils.REJECT_UNAUTHORIZED_FNS = [];
    if (fn === undefined) delete LibraryUtils.REJECT_UNAUTHORIZED_FNS[fnId];else
    LibraryUtils.REJECT_UNAUTHORIZED_FNS[fnId] = fn;
  }

  /**
   * Indicate if unauthorized requests should be rejected.
   * 
   * @param {string} fnId - uniquely identifies the function
   */
  static isRejectUnauthorized(fnId) {
    if (!LibraryUtils.REJECT_UNAUTHORIZED_FNS[fnId]) throw new Error("No function registered with id " + fnId + " to inform if unauthorized reqs should be rejected");
    return LibraryUtils.REJECT_UNAUTHORIZED_FNS[fnId]();
  }

  /**
   * Set the path to load the worker. Defaults to "/monero_web_worker.js" in the browser
   * and "./MoneroWebWorker.js" in node.
   * 
   * @param {string} workerDistPath - path to load the worker
   */
  static setWorkerDistPath(workerDistPath) {
    let path = LibraryUtils.prefixWindowsPath(workerDistPath ? workerDistPath : LibraryUtils.WORKER_DIST_PATH_DEFAULT);
    if (path !== LibraryUtils.WORKER_DIST_PATH) delete LibraryUtils.WORKER;
    LibraryUtils.WORKER_DIST_PATH = path;
  }

  /**
   * Get a singleton instance of a worker to share.
   * 
   * @return {Worker} a worker to share among wallet instances
   */
  static async getWorker() {

    // one time initialization
    if (!LibraryUtils.WORKER) {
      if (_GenUtils.default.isBrowser()) {
        LibraryUtils.WORKER = new Worker(LibraryUtils.WORKER_DIST_PATH);
      } else {
        const Worker = require("web-worker"); // import web worker if nodejs
        LibraryUtils.WORKER = new Worker(LibraryUtils.WORKER_DIST_PATH);
      }
      LibraryUtils.WORKER_OBJECTS = {}; // store per object running in the worker

      // receive worker errors
      LibraryUtils.WORKER.onerror = function (err) {
        console.error("Error posting message to Monero web worker; is it built and copied to the app's build directory (e.g. in the root)?");
        console.log(err);
      };

      // receive worker messages
      LibraryUtils.WORKER.onmessage = function (e) {

        // lookup object id, callback function, and this arg
        let thisArg = undefined;
        let callbackFn = LibraryUtils.WORKER_OBJECTS[e.data[0]].callbacks[e.data[1]]; // look up by object id then by function name
        if (callbackFn === undefined) throw new Error("No worker callback function defined for key '" + e.data[1] + "'");
        if (callbackFn instanceof Array) {// this arg may be stored with callback function
          thisArg = callbackFn[1];
          callbackFn = callbackFn[0];
        }

        // invoke callback function with this arg and arguments
        callbackFn.apply(thisArg, e.data.slice(2));
      };
    }
    return LibraryUtils.WORKER;
  }

  static addWorkerCallback(objectId, callbackId, callbackArgs) {
    LibraryUtils.WORKER_OBJECTS[objectId].callbacks[callbackId] = callbackArgs;
  }

  static removeWorkerCallback(objectId, callbackId) {
    delete LibraryUtils.WORKER_OBJECTS[objectId].callbacks[callbackId];
  }

  static removeWorkerObject(objectId) {
    delete LibraryUtils.WORKER_OBJECTS[objectId];
  }

  /**
   * Terminate monero-ts's singleton worker.
   */
  static async terminateWorker() {
    if (LibraryUtils.WORKER) {
      LibraryUtils.WORKER.terminate();
      delete LibraryUtils.WORKER;
      LibraryUtils.WORKER = undefined;
    }
  }

  /**
   * Invoke a worker function and get the result with error handling.
   * 
   * @param {string} objectId identifies the worker object to invoke (default random id)
   * @param {string} fnName is the name of the function to invoke
   * @param {any[]} [args] are function arguments to invoke with
   * @return {any} resolves with response payload from the worker or an error
   */
  static async invokeWorker(objectId, fnName, args) {
    (0, _assert.default)(fnName.length >= 2);
    let worker = await LibraryUtils.getWorker();
    let randomObject = objectId === undefined;
    if (randomObject) objectId = _GenUtils.default.getUUID();
    if (!LibraryUtils.WORKER_OBJECTS[objectId]) LibraryUtils.WORKER_OBJECTS[objectId] = { callbacks: {} };
    let callbackId = _GenUtils.default.getUUID();
    try {
      return await new Promise((resolve, reject) => {
        LibraryUtils.WORKER_OBJECTS[objectId].callbacks[callbackId] = (resp) => {// TODO: this defines function once per callback
          delete LibraryUtils.WORKER_OBJECTS[objectId].callbacks[callbackId];
          if (randomObject) delete LibraryUtils.WORKER_OBJECTS[objectId];
          resp ? resp.error ? reject(new Error(JSON.stringify(resp.error))) : resolve(resp.result) : resolve(undefined);
        };
        worker.postMessage([objectId, fnName, callbackId].concat(args === undefined ? [] : _GenUtils.default.listify(args)));
      });
    } catch (e) {
      throw LibraryUtils.deserializeError(JSON.parse(e.message));
    }
  }

  static serializeError(err) {
    const serializedErr = { name: err.name, message: err.message, stack: err.stack };
    if (err instanceof _MoneroError.default) serializedErr.type = "MoneroError";
    return serializedErr;
  }

  static deserializeError(serializedErr) {
    const err = serializedErr.type === "MoneroError" ? new _MoneroError.default(serializedErr.message) : new Error(serializedErr.message);
    err.name = serializedErr.name;
    err.stack = err.stack + "\nWorker error: " + serializedErr.stack;
    return err;
  }

  // ------------------------------ PRIVATE HELPERS ---------------------------

  static initWasmModule(wasmModule) {
    wasmModule.taskQueue = new _ThreadPool.default(1);
    wasmModule.queueTask = async function (asyncFn) {return wasmModule.taskQueue.submit(asyncFn);};
  }

  static prefixWindowsPath(path) {
    if (/^[A-Z]:/.test(path) && path.indexOf("file://") == -1) path = "file://" + path; // prepend e.g. C: paths with file://
    return path;
  }
}exports.default = LibraryUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXNzZXJ0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfR2VuVXRpbHMiLCJfTW9uZXJvRXJyb3IiLCJfVGhyZWFkUG9vbCIsIl9wYXRoIiwiTGlicmFyeVV0aWxzIiwiTE9HX0xFVkVMIiwiV09SS0VSX0RJU1RfUEFUSF9ERUZBVUxUIiwiR2VuVXRpbHMiLCJpc0Jyb3dzZXIiLCJjdXJQYXRoIiwicGF0aCIsIm5vcm1hbGl6ZSIsIl9fZGlybmFtZSIsInRhcmdldFBhdGgiLCJqb2luIiwiaW5jbHVkZXMiLCJwcmVmaXhXaW5kb3dzUGF0aCIsIldPUktFUl9ESVNUX1BBVEgiLCJsb2ciLCJsZXZlbCIsIm1zZyIsImFzc2VydCIsInBhcnNlSW50IiwiY29uc29sZSIsInNldExvZ0xldmVsIiwiV0FTTV9NT0RVTEUiLCJzZXRfbG9nX2xldmVsIiwiV09SS0VSIiwiaW52b2tlV29ya2VyIiwidW5kZWZpbmVkIiwiZ2V0TG9nTGV2ZWwiLCJnZXRXYXNtTWVtb3J5VXNlZCIsInRvdGFsIiwiZ2V0V2FzbU1vZHVsZSIsIkhFQVA4IiwibGVuZ3RoIiwibG9hZEtleXNNb2R1bGUiLCJtb2R1bGUiLCJ0aGVuIiwiaW5pdFdhc21Nb2R1bGUiLCJsb2FkRnVsbE1vZHVsZSIsIkZVTExfTE9BREVEIiwic2V0UmVqZWN0VW5hdXRob3JpemVkRm4iLCJmbklkIiwiZm4iLCJSRUpFQ1RfVU5BVVRIT1JJWkVEX0ZOUyIsImlzUmVqZWN0VW5hdXRob3JpemVkIiwiRXJyb3IiLCJzZXRXb3JrZXJEaXN0UGF0aCIsIndvcmtlckRpc3RQYXRoIiwiZ2V0V29ya2VyIiwiV29ya2VyIiwiV09SS0VSX09CSkVDVFMiLCJvbmVycm9yIiwiZXJyIiwiZXJyb3IiLCJvbm1lc3NhZ2UiLCJlIiwidGhpc0FyZyIsImNhbGxiYWNrRm4iLCJkYXRhIiwiY2FsbGJhY2tzIiwiQXJyYXkiLCJhcHBseSIsInNsaWNlIiwiYWRkV29ya2VyQ2FsbGJhY2siLCJvYmplY3RJZCIsImNhbGxiYWNrSWQiLCJjYWxsYmFja0FyZ3MiLCJyZW1vdmVXb3JrZXJDYWxsYmFjayIsInJlbW92ZVdvcmtlck9iamVjdCIsInRlcm1pbmF0ZVdvcmtlciIsInRlcm1pbmF0ZSIsImZuTmFtZSIsImFyZ3MiLCJ3b3JrZXIiLCJyYW5kb21PYmplY3QiLCJnZXRVVUlEIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXNwIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3VsdCIsInBvc3RNZXNzYWdlIiwiY29uY2F0IiwibGlzdGlmeSIsImRlc2VyaWFsaXplRXJyb3IiLCJwYXJzZSIsIm1lc3NhZ2UiLCJzZXJpYWxpemVFcnJvciIsInNlcmlhbGl6ZWRFcnIiLCJuYW1lIiwic3RhY2siLCJNb25lcm9FcnJvciIsInR5cGUiLCJ3YXNtTW9kdWxlIiwidGFza1F1ZXVlIiwiVGhyZWFkUG9vbCIsInF1ZXVlVGFzayIsImFzeW5jRm4iLCJzdWJtaXQiLCJ0ZXN0IiwiaW5kZXhPZiIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vdHMvY29tbW9uL0xpYnJhcnlVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcbmltcG9ydCBHZW5VdGlscyBmcm9tIFwiLi9HZW5VdGlsc1wiO1xuaW1wb3J0IE1vbmVyb0Vycm9yIGZyb20gXCIuL01vbmVyb0Vycm9yXCI7XG5pbXBvcnQgVGhyZWFkUG9vbCBmcm9tIFwiLi9UaHJlYWRQb29sXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG4vKipcbiAqIENvbGxlY3Rpb24gb2YgaGVscGVyIHV0aWxpdGllcyBmb3IgdGhlIGxpYnJhcnkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpYnJhcnlVdGlscyB7XG5cbiAgLy8gc3RhdGljIHZhcmlhYmxlc1xuICBzdGF0aWMgTE9HX0xFVkVMID0gMDtcbiAgc3RhdGljIFdBU01fTU9EVUxFOiBhbnk7XG4gIHN0YXRpYyBXT1JLRVI6IGFueTtcbiAgc3RhdGljIFdPUktFUl9PQkpFQ1RTOiBhbnk7XG4gIHN0YXRpYyBGVUxMX0xPQURFRDogYW55O1xuICBzdGF0aWMgUkVKRUNUX1VOQVVUSE9SSVpFRF9GTlM6IGFueTtcbiAgc3RhdGljIFdPUktFUl9ESVNUX1BBVEhfREVGQVVMVCA9IEdlblV0aWxzLmlzQnJvd3NlcigpID8gXCIvbW9uZXJvX3dlYl93b3JrZXIuanNcIiA6IGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gZ2V0IHdvcmtlciBwYXRoIGluIGRpc3QgKGFzc3VtZXMgbGlicmFyeSBpcyBydW5uaW5nIGZyb20gc3JjIG9yIGRpc3QpXG4gICAgbGV0IGN1clBhdGggPSBwYXRoLm5vcm1hbGl6ZShfX2Rpcm5hbWUpO1xuICAgIGNvbnN0IHRhcmdldFBhdGggPSBwYXRoLmpvaW4oJ21vbmVyby10cycsICdkaXN0Jyk7XG4gICAgaWYgKCFjdXJQYXRoLmluY2x1ZGVzKHRhcmdldFBhdGgpKSBjdXJQYXRoID0gcGF0aC5qb2luKGN1clBhdGgsIFwiLi4vLi4vLi4vLi4vZGlzdC9zcmMvbWFpbi9qcy9jb21tb25cIik7XG4gICAgcmV0dXJuIExpYnJhcnlVdGlscy5wcmVmaXhXaW5kb3dzUGF0aChwYXRoLmpvaW4oY3VyUGF0aCwgXCIuL01vbmVyb1dlYldvcmtlci5qc1wiKSk7XG4gIH0oKTtcbiAgc3RhdGljIFdPUktFUl9ESVNUX1BBVEggPSBMaWJyYXJ5VXRpbHMuV09SS0VSX0RJU1RfUEFUSF9ERUZBVUxUO1xuICBcbiAgLyoqXG4gICAqIExvZyBhIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZXZlbCAtIGxvZyBsZXZlbCBvZiB0aGUgbWVzc2FnZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbXNnIC0gbWVzc2FnZSB0byBsb2dcbiAgICovXG4gIHN0YXRpYyBsb2cobGV2ZWwsIG1zZykge1xuICAgIGFzc2VydChsZXZlbCA9PT0gcGFyc2VJbnQobGV2ZWwsIDEwKSAmJiBsZXZlbCA+PSAwLCBcIkxvZyBsZXZlbCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMFwiKTtcbiAgICBpZiAoTGlicmFyeVV0aWxzLkxPR19MRVZFTCA+PSBsZXZlbCkgY29uc29sZS5sb2cobXNnKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIFNldCB0aGUgbGlicmFyeSdzIGxvZyBsZXZlbCB3aXRoIDAgYmVpbmcgbGVhc3QgdmVyYm9zZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxldmVsIC0gdGhlIGxpYnJhcnkncyBsb2cgbGV2ZWxcbiAgICovXG4gIHN0YXRpYyBhc3luYyBzZXRMb2dMZXZlbChsZXZlbCkge1xuICAgIGFzc2VydChsZXZlbCA9PT0gcGFyc2VJbnQobGV2ZWwsIDEwKSAmJiBsZXZlbCA+PSAwLCBcIkxvZyBsZXZlbCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMFwiKTtcbiAgICBMaWJyYXJ5VXRpbHMuTE9HX0xFVkVMID0gbGV2ZWw7XG4gICAgaWYgKExpYnJhcnlVdGlscy5XQVNNX01PRFVMRSkgTGlicmFyeVV0aWxzLldBU01fTU9EVUxFLnNldF9sb2dfbGV2ZWwobGV2ZWwpO1xuICAgIGlmIChMaWJyYXJ5VXRpbHMuV09SS0VSKSBhd2FpdCBMaWJyYXJ5VXRpbHMuaW52b2tlV29ya2VyKHVuZGVmaW5lZCwgXCJzZXRMb2dMZXZlbFwiLCBbbGV2ZWxdKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdldCB0aGUgbGlicmFyeSdzIGxvZyBsZXZlbC5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSB0aGUgbGlicmFyeSdzIGxvZyBsZXZlbFxuICAgKi9cbiAgc3RhdGljIGdldExvZ0xldmVsKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIExpYnJhcnlVdGlscy5MT0dfTEVWRUw7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZXQgdGhlIHRvdGFsIG1lbW9yeSB1c2VkIGJ5IFdlYkFzc2VtYmx5LlxuICAgKiBcbiAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fSB0aGUgdG90YWwgbWVtb3J5IHVzZWQgYnkgV2ViQXNzZW1ibHlcbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZXRXYXNtTWVtb3J5VXNlZCgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGxldCB0b3RhbCA9IDA7XG4gICAgaWYgKExpYnJhcnlVdGlscy5XT1JLRVIpIHRvdGFsICs9IGF3YWl0IExpYnJhcnlVdGlscy5pbnZva2VXb3JrZXIodW5kZWZpbmVkLCBcImdldFdhc21NZW1vcnlVc2VkXCIsIFtdKSBhcyBudW1iZXI7XG4gICAgaWYgKExpYnJhcnlVdGlscy5nZXRXYXNtTW9kdWxlKCkgJiYgTGlicmFyeVV0aWxzLmdldFdhc21Nb2R1bGUoKS5IRUFQOCkgdG90YWwgKz0gTGlicmFyeVV0aWxzLmdldFdhc21Nb2R1bGUoKS5IRUFQOC5sZW5ndGg7XG4gICAgcmV0dXJuIHRvdGFsO1xuICB9XG4gIFxuICAvKipcbiAgICogR2V0IHRoZSBXZWJBc3NlbWJseSBtb2R1bGUgaW4gdGhlIGN1cnJlbnQgY29udGV4dCAobm9kZWpzLCBicm93c2VyIG1haW4gdGhyZWFkIG9yIHdvcmtlcikuXG4gICAqL1xuICBzdGF0aWMgZ2V0V2FzbU1vZHVsZSgpIHtcbiAgICByZXR1cm4gTGlicmFyeVV0aWxzLldBU01fTU9EVUxFO1xuICB9XG4gIFxuICAvKipcbiAgICogTG9hZCB0aGUgV2ViQXNzZW1ibHkga2V5cyBtb2R1bGUgd2l0aCBjYWNoaW5nLlxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGxvYWRLZXlzTW9kdWxlKCkge1xuICAgIFxuICAgIC8vIHVzZSBjYWNoZSBpZiBzdWl0YWJsZSwgZnVsbCBtb2R1bGUgc3VwZXJzZWRlcyBrZXlzIG1vZHVsZSBiZWNhdXNlIGl0IGlzIHN1cGVyc2V0XG4gICAgaWYgKExpYnJhcnlVdGlscy5XQVNNX01PRFVMRSkgcmV0dXJuIExpYnJhcnlVdGlscy5XQVNNX01PRFVMRTtcbiAgICBcbiAgICAvLyBsb2FkIG1vZHVsZVxuICAgIGxldCBtb2R1bGUgPSBhd2FpdCByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZGlzdC9tb25lcm9fd2FsbGV0X2tleXNcIikoKTtcbiAgICBMaWJyYXJ5VXRpbHMuV0FTTV9NT0RVTEUgPSBtb2R1bGVcbiAgICBkZWxldGUgTGlicmFyeVV0aWxzLldBU01fTU9EVUxFLnRoZW47XG4gICAgTGlicmFyeVV0aWxzLmluaXRXYXNtTW9kdWxlKExpYnJhcnlVdGlscy5XQVNNX01PRFVMRSk7XG4gICAgcmV0dXJuIG1vZHVsZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIExvYWQgdGhlIFdlYkFzc2VtYmx5IGZ1bGwgbW9kdWxlIHdpdGggY2FjaGluZy5cbiAgICogXG4gICAqIFRoZSBmdWxsIG1vZHVsZSBpcyBhIHN1cGVyc2V0IG9mIHRoZSBrZXlzIG1vZHVsZSBhbmQgb3ZlcnJpZGVzIGl0LlxuICAgKiBcbiAgICogVE9ETzogdGhpcyBpcyBzZXBhcmF0ZSBzdGF0aWMgZnVuY3Rpb24gZnJvbSBsb2FkS2V5c01vZHVsZSgpIGJlY2F1c2Ugd2VicGFjayBjYW5ub3QgYnVuZGxlIHdvcmtlciB1c2luZyBydW50aW1lIHBhcmFtIGZvciBjb25kaXRpb25hbCBpbXBvcnRcbiAgICovXG4gIHN0YXRpYyBhc3luYyBsb2FkRnVsbE1vZHVsZSgpIHtcbiAgICBcbiAgICAvLyB1c2UgY2FjaGUgaWYgc3VpdGFibGUsIGZ1bGwgbW9kdWxlIHN1cGVyc2VkZXMga2V5cyBtb2R1bGUgYmVjYXVzZSBpdCBpcyBzdXBlcnNldFxuICAgIGlmIChMaWJyYXJ5VXRpbHMuV0FTTV9NT0RVTEUgJiYgTGlicmFyeVV0aWxzLkZVTExfTE9BREVEKSByZXR1cm4gTGlicmFyeVV0aWxzLldBU01fTU9EVUxFO1xuICAgIFxuICAgIC8vIGxvYWQgbW9kdWxlXG4gICAgbGV0IG1vZHVsZSA9IGF3YWl0IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9kaXN0L21vbmVyb193YWxsZXRfZnVsbFwiKSgpO1xuICAgIExpYnJhcnlVdGlscy5XQVNNX01PRFVMRSA9IG1vZHVsZVxuICAgIGRlbGV0ZSBMaWJyYXJ5VXRpbHMuV0FTTV9NT0RVTEUudGhlbjtcbiAgICBMaWJyYXJ5VXRpbHMuRlVMTF9MT0FERUQgPSB0cnVlO1xuICAgIExpYnJhcnlVdGlscy5pbml0V2FzbU1vZHVsZShMaWJyYXJ5VXRpbHMuV0FTTV9NT0RVTEUpO1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGZ1bmN0aW9uIGJ5IGlkIHdoaWNoIGluZm9ybXMgaWYgdW5hdXRob3JpemVkIHJlcXVlc3RzIChlLmcuXG4gICAqIHNlbGYtc2lnbmVkIGNlcnRpZmljYXRlcykgc2hvdWxkIGJlIHJlamVjdGVkLlxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZuSWQgLSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gZnVuY3Rpb24gdG8gaW5mb3JtIGlmIHVuYXV0aG9yaXplZCByZXF1ZXN0cyBzaG91bGQgYmUgcmVqZWN0ZWRcbiAgICovXG4gIHN0YXRpYyBzZXRSZWplY3RVbmF1dGhvcml6ZWRGbihmbklkLCBmbikge1xuICAgIGlmICghTGlicmFyeVV0aWxzLlJFSkVDVF9VTkFVVEhPUklaRURfRk5TKSBMaWJyYXJ5VXRpbHMuUkVKRUNUX1VOQVVUSE9SSVpFRF9GTlMgPSBbXTtcbiAgICBpZiAoZm4gPT09IHVuZGVmaW5lZCkgZGVsZXRlIExpYnJhcnlVdGlscy5SRUpFQ1RfVU5BVVRIT1JJWkVEX0ZOU1tmbklkXTtcbiAgICBlbHNlIExpYnJhcnlVdGlscy5SRUpFQ1RfVU5BVVRIT1JJWkVEX0ZOU1tmbklkXSA9IGZuO1xuICB9XG4gIFxuICAvKipcbiAgICogSW5kaWNhdGUgaWYgdW5hdXRob3JpemVkIHJlcXVlc3RzIHNob3VsZCBiZSByZWplY3RlZC5cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbklkIC0gdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgZnVuY3Rpb25cbiAgICovXG4gIHN0YXRpYyBpc1JlamVjdFVuYXV0aG9yaXplZChmbklkKSB7XG4gICAgaWYgKCFMaWJyYXJ5VXRpbHMuUkVKRUNUX1VOQVVUSE9SSVpFRF9GTlNbZm5JZF0pIHRocm93IG5ldyBFcnJvcihcIk5vIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCBpZCBcIiArIGZuSWQgKyBcIiB0byBpbmZvcm0gaWYgdW5hdXRob3JpemVkIHJlcXMgc2hvdWxkIGJlIHJlamVjdGVkXCIpO1xuICAgIHJldHVybiBMaWJyYXJ5VXRpbHMuUkVKRUNUX1VOQVVUSE9SSVpFRF9GTlNbZm5JZF0oKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIFNldCB0aGUgcGF0aCB0byBsb2FkIHRoZSB3b3JrZXIuIERlZmF1bHRzIHRvIFwiL21vbmVyb193ZWJfd29ya2VyLmpzXCIgaW4gdGhlIGJyb3dzZXJcbiAgICogYW5kIFwiLi9Nb25lcm9XZWJXb3JrZXIuanNcIiBpbiBub2RlLlxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdvcmtlckRpc3RQYXRoIC0gcGF0aCB0byBsb2FkIHRoZSB3b3JrZXJcbiAgICovXG4gIHN0YXRpYyBzZXRXb3JrZXJEaXN0UGF0aCh3b3JrZXJEaXN0UGF0aCkge1xuICAgIGxldCBwYXRoID0gTGlicmFyeVV0aWxzLnByZWZpeFdpbmRvd3NQYXRoKHdvcmtlckRpc3RQYXRoID8gd29ya2VyRGlzdFBhdGggOiBMaWJyYXJ5VXRpbHMuV09SS0VSX0RJU1RfUEFUSF9ERUZBVUxUKTtcbiAgICBpZiAocGF0aCAhPT0gTGlicmFyeVV0aWxzLldPUktFUl9ESVNUX1BBVEgpIGRlbGV0ZSBMaWJyYXJ5VXRpbHMuV09SS0VSO1xuICAgIExpYnJhcnlVdGlscy5XT1JLRVJfRElTVF9QQVRIID0gcGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYSB3b3JrZXIgdG8gc2hhcmUuXG4gICAqIFxuICAgKiBAcmV0dXJuIHtXb3JrZXJ9IGEgd29ya2VyIHRvIHNoYXJlIGFtb25nIHdhbGxldCBpbnN0YW5jZXNcbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZXRXb3JrZXIoKSB7XG4gICAgXG4gICAgLy8gb25lIHRpbWUgaW5pdGlhbGl6YXRpb25cbiAgICBpZiAoIUxpYnJhcnlVdGlscy5XT1JLRVIpIHtcbiAgICAgIGlmIChHZW5VdGlscy5pc0Jyb3dzZXIoKSkge1xuICAgICAgICBMaWJyYXJ5VXRpbHMuV09SS0VSID0gbmV3IFdvcmtlcihMaWJyYXJ5VXRpbHMuV09SS0VSX0RJU1RfUEFUSCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBXb3JrZXIgPSByZXF1aXJlKFwid2ViLXdvcmtlclwiKTsgLy8gaW1wb3J0IHdlYiB3b3JrZXIgaWYgbm9kZWpzXG4gICAgICAgIExpYnJhcnlVdGlscy5XT1JLRVIgPSBuZXcgV29ya2VyKExpYnJhcnlVdGlscy5XT1JLRVJfRElTVF9QQVRIKTtcbiAgICAgIH1cbiAgICAgIExpYnJhcnlVdGlscy5XT1JLRVJfT0JKRUNUUyA9IHt9OyAgLy8gc3RvcmUgcGVyIG9iamVjdCBydW5uaW5nIGluIHRoZSB3b3JrZXJcbiAgICAgIFxuICAgICAgLy8gcmVjZWl2ZSB3b3JrZXIgZXJyb3JzXG4gICAgICBMaWJyYXJ5VXRpbHMuV09SS0VSLm9uZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHBvc3RpbmcgbWVzc2FnZSB0byBNb25lcm8gd2ViIHdvcmtlcjsgaXMgaXQgYnVpbHQgYW5kIGNvcGllZCB0byB0aGUgYXBwJ3MgYnVpbGQgZGlyZWN0b3J5IChlLmcuIGluIHRoZSByb290KT9cIik7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyByZWNlaXZlIHdvcmtlciBtZXNzYWdlc1xuICAgICAgTGlicmFyeVV0aWxzLldPUktFUi5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBsb29rdXAgb2JqZWN0IGlkLCBjYWxsYmFjayBmdW5jdGlvbiwgYW5kIHRoaXMgYXJnXG4gICAgICAgIGxldCB0aGlzQXJnID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY2FsbGJhY2tGbiA9IExpYnJhcnlVdGlscy5XT1JLRVJfT0JKRUNUU1tlLmRhdGFbMF1dLmNhbGxiYWNrc1tlLmRhdGFbMV1dOyAvLyBsb29rIHVwIGJ5IG9iamVjdCBpZCB0aGVuIGJ5IGZ1bmN0aW9uIG5hbWVcbiAgICAgICAgaWYgKGNhbGxiYWNrRm4gPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gd29ya2VyIGNhbGxiYWNrIGZ1bmN0aW9uIGRlZmluZWQgZm9yIGtleSAnXCIgKyBlLmRhdGFbMV0gKyBcIidcIik7XG4gICAgICAgIGlmIChjYWxsYmFja0ZuIGluc3RhbmNlb2YgQXJyYXkpIHsgIC8vIHRoaXMgYXJnIG1heSBiZSBzdG9yZWQgd2l0aCBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICAgIHRoaXNBcmcgPSBjYWxsYmFja0ZuWzFdO1xuICAgICAgICAgIGNhbGxiYWNrRm4gPSBjYWxsYmFja0ZuWzBdO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBpbnZva2UgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCB0aGlzIGFyZyBhbmQgYXJndW1lbnRzXG4gICAgICAgIGNhbGxiYWNrRm4uYXBwbHkodGhpc0FyZywgZS5kYXRhLnNsaWNlKDIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIExpYnJhcnlVdGlscy5XT1JLRVI7XG4gIH1cblxuICBzdGF0aWMgYWRkV29ya2VyQ2FsbGJhY2sob2JqZWN0SWQsIGNhbGxiYWNrSWQsIGNhbGxiYWNrQXJncykge1xuICAgIExpYnJhcnlVdGlscy5XT1JLRVJfT0JKRUNUU1tvYmplY3RJZF0uY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gY2FsbGJhY2tBcmdzO1xuICB9XG5cbiAgc3RhdGljIHJlbW92ZVdvcmtlckNhbGxiYWNrKG9iamVjdElkLCBjYWxsYmFja0lkKSB7XG4gICAgZGVsZXRlIExpYnJhcnlVdGlscy5XT1JLRVJfT0JKRUNUU1tvYmplY3RJZF0uY2FsbGJhY2tzW2NhbGxiYWNrSWRdO1xuICB9XG5cbiAgc3RhdGljIHJlbW92ZVdvcmtlck9iamVjdChvYmplY3RJZCkge1xuICAgIGRlbGV0ZSBMaWJyYXJ5VXRpbHMuV09SS0VSX09CSkVDVFNbb2JqZWN0SWRdO1xuICB9XG4gIFxuICAvKipcbiAgICogVGVybWluYXRlIG1vbmVyby10cydzIHNpbmdsZXRvbiB3b3JrZXIuXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgdGVybWluYXRlV29ya2VyKCkge1xuICAgIGlmIChMaWJyYXJ5VXRpbHMuV09SS0VSKSB7XG4gICAgICBMaWJyYXJ5VXRpbHMuV09SS0VSLnRlcm1pbmF0ZSgpO1xuICAgICAgZGVsZXRlIExpYnJhcnlVdGlscy5XT1JLRVI7XG4gICAgICBMaWJyYXJ5VXRpbHMuV09SS0VSID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2UgYSB3b3JrZXIgZnVuY3Rpb24gYW5kIGdldCB0aGUgcmVzdWx0IHdpdGggZXJyb3IgaGFuZGxpbmcuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqZWN0SWQgaWRlbnRpZmllcyB0aGUgd29ya2VyIG9iamVjdCB0byBpbnZva2UgKGRlZmF1bHQgcmFuZG9tIGlkKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lIGlzIHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBpbnZva2VcbiAgICogQHBhcmFtIHthbnlbXX0gW2FyZ3NdIGFyZSBmdW5jdGlvbiBhcmd1bWVudHMgdG8gaW52b2tlIHdpdGhcbiAgICogQHJldHVybiB7YW55fSByZXNvbHZlcyB3aXRoIHJlc3BvbnNlIHBheWxvYWQgZnJvbSB0aGUgd29ya2VyIG9yIGFuIGVycm9yXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgaW52b2tlV29ya2VyKG9iamVjdElkLCBmbk5hbWUsIGFyZ3MpIHtcbiAgICBhc3NlcnQoZm5OYW1lLmxlbmd0aCA+PSAyKTtcbiAgICBsZXQgd29ya2VyID0gYXdhaXQgTGlicmFyeVV0aWxzLmdldFdvcmtlcigpO1xuICAgIGxldCByYW5kb21PYmplY3QgPSBvYmplY3RJZCA9PT0gdW5kZWZpbmVkO1xuICAgIGlmIChyYW5kb21PYmplY3QpIG9iamVjdElkID0gR2VuVXRpbHMuZ2V0VVVJRCgpO1xuICAgIGlmICghTGlicmFyeVV0aWxzLldPUktFUl9PQkpFQ1RTW29iamVjdElkXSkgTGlicmFyeVV0aWxzLldPUktFUl9PQkpFQ1RTW29iamVjdElkXSA9IHtjYWxsYmFja3M6IHt9fTtcbiAgICBsZXQgY2FsbGJhY2tJZCA9IEdlblV0aWxzLmdldFVVSUQoKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgTGlicmFyeVV0aWxzLldPUktFUl9PQkpFQ1RTW29iamVjdElkXS5jYWxsYmFja3NbY2FsbGJhY2tJZF0gPSAocmVzcCkgPT4geyAgLy8gVE9ETzogdGhpcyBkZWZpbmVzIGZ1bmN0aW9uIG9uY2UgcGVyIGNhbGxiYWNrXG4gICAgICAgICAgZGVsZXRlIExpYnJhcnlVdGlscy5XT1JLRVJfT0JKRUNUU1tvYmplY3RJZF0uY2FsbGJhY2tzW2NhbGxiYWNrSWRdO1xuICAgICAgICAgIGlmIChyYW5kb21PYmplY3QpIGRlbGV0ZSBMaWJyYXJ5VXRpbHMuV09SS0VSX09CSkVDVFNbb2JqZWN0SWRdO1xuICAgICAgICAgIHJlc3AgPyAocmVzcC5lcnJvciA/IHJlamVjdChuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkocmVzcC5lcnJvcikpKSA6IHJlc29sdmUocmVzcC5yZXN1bHQpKSA6IHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKFtvYmplY3RJZCwgZm5OYW1lLCBjYWxsYmFja0lkXS5jb25jYXQoYXJncyA9PT0gdW5kZWZpbmVkID8gW10gOiBHZW5VdGlscy5saXN0aWZ5KGFyZ3MpKSk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIHRocm93IExpYnJhcnlVdGlscy5kZXNlcmlhbGl6ZUVycm9yKEpTT04ucGFyc2UoZS5tZXNzYWdlKSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHNlcmlhbGl6ZUVycm9yKGVycikge1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRFcnI6IGFueSA9IHsgbmFtZTogZXJyLm5hbWUsIG1lc3NhZ2U6IGVyci5tZXNzYWdlLCBzdGFjazogZXJyLnN0YWNrIH07XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIE1vbmVyb0Vycm9yKSBzZXJpYWxpemVkRXJyLnR5cGUgPSBcIk1vbmVyb0Vycm9yXCI7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRFcnI7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RhdGljIGRlc2VyaWFsaXplRXJyb3Ioc2VyaWFsaXplZEVycikge1xuICAgIGNvbnN0IGVyciA9IHNlcmlhbGl6ZWRFcnIudHlwZSA9PT0gXCJNb25lcm9FcnJvclwiID8gbmV3IE1vbmVyb0Vycm9yKHNlcmlhbGl6ZWRFcnIubWVzc2FnZSkgOiBuZXcgRXJyb3Ioc2VyaWFsaXplZEVyci5tZXNzYWdlKTtcbiAgICBlcnIubmFtZSA9IHNlcmlhbGl6ZWRFcnIubmFtZTtcbiAgICBlcnIuc3RhY2sgPSBlcnIuc3RhY2sgKyBcIlxcbldvcmtlciBlcnJvcjogXCIgKyBzZXJpYWxpemVkRXJyLnN0YWNrO1xuICAgIHJldHVybiBlcnI7XG4gIH1cbiAgXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQUklWQVRFIEhFTFBFUlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFxuICBwcm90ZWN0ZWQgc3RhdGljIGluaXRXYXNtTW9kdWxlKHdhc21Nb2R1bGUpIHtcbiAgICB3YXNtTW9kdWxlLnRhc2tRdWV1ZSA9IG5ldyBUaHJlYWRQb29sKDEpO1xuICAgIHdhc21Nb2R1bGUucXVldWVUYXNrID0gYXN5bmMgZnVuY3Rpb24oYXN5bmNGbikgeyByZXR1cm4gd2FzbU1vZHVsZS50YXNrUXVldWUuc3VibWl0KGFzeW5jRm4pOyB9XG4gIH1cbiAgXG4gIHByb3RlY3RlZCBzdGF0aWMgcHJlZml4V2luZG93c1BhdGgocGF0aCkge1xuICAgIGlmICgvXltBLVpdOi8udGVzdChwYXRoKSAmJiBwYXRoLmluZGV4T2YoXCJmaWxlOi8vXCIpID09IC0xKSBwYXRoID0gXCJmaWxlOi8vXCIgKyBwYXRoOyAvLyBwcmVwZW5kIGUuZy4gQzogcGF0aHMgd2l0aCBmaWxlOi8vXG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6InlMQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDZSxNQUFNSyxZQUFZLENBQUM7O0VBRWhDO0VBQ0EsT0FBT0MsU0FBUyxHQUFHLENBQUM7Ozs7OztFQU1wQixPQUFPQyx3QkFBd0IsR0FBR0MsaUJBQVEsQ0FBQ0MsU0FBUyxDQUFDLENBQUMsR0FBRyx1QkFBdUIsR0FBRyxZQUFXOztJQUU1RjtJQUNBLElBQUlDLE9BQU8sR0FBR0MsYUFBSSxDQUFDQyxTQUFTLENBQUNDLFNBQVMsQ0FBQztJQUN2QyxNQUFNQyxVQUFVLEdBQUdILGFBQUksQ0FBQ0ksSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUM7SUFDakQsSUFBSSxDQUFDTCxPQUFPLENBQUNNLFFBQVEsQ0FBQ0YsVUFBVSxDQUFDLEVBQUVKLE9BQU8sR0FBR0MsYUFBSSxDQUFDSSxJQUFJLENBQUNMLE9BQU8sRUFBRSxxQ0FBcUMsQ0FBQztJQUN0RyxPQUFPTCxZ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