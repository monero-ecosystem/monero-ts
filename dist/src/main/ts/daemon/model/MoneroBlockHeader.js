"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));

/**
 * Models a Monero block header which contains information about the block.
 */
class MoneroBlockHeader {




















  constructor(header) {
    Object.assign(this, header);

    // deserialize bigints
    if (this.difficulty !== undefined && typeof this.difficulty !== "bigint") this.difficulty = BigInt(this.difficulty);
    if (this.cumulativeDifficulty !== undefined && typeof this.cumulativeDifficulty !== "bigint") this.cumulativeDifficulty = BigInt(this.cumulativeDifficulty);
    if (this.reward !== undefined && typeof this.reward !== "bigint") this.reward = BigInt(this.reward);
  }

  copy() {
    return new MoneroBlockHeader(this);
  }

  toJson() {
    let json = Object.assign({}, this);
    if (this.getDifficulty() !== undefined) json.difficulty = this.getDifficulty().toString();
    if (this.getCumulativeDifficulty() !== undefined) json.cumulativeDifficulty = this.getCumulativeDifficulty().toString();
    if (this.getReward() !== undefined) json.reward = this.getReward().toString();
    return json;
  }

  getHash() {
    return this.hash;
  }

  setHash(hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Return the block's height which is the total number of blocks that have occurred before.
   * 
   * @return {number} the block's height
   */
  getHeight() {
    return this.height;
  }

  /**
   * Set the block's height which is the total number of blocks that have occurred before.
   * 
   * @param {number} height is the block's height to set
   * @return {MoneroBlockHeader} a reference to this header for chaining
   */
  setHeight(height) {
    this.height = height;
    return this;
  }

  getTimestamp() {
    return this.timestamp;
  }

  setTimestamp(timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  getSize() {
    return this.size;
  }

  setSize(size) {
    this.size = size;
    return this;
  }

  getWeight() {
    return this.weight;
  }

  setWeight(weight) {
    this.weight = weight;
    return this;
  }

  getLongTermWeight() {
    return this.longTermWeight;
  }

  setLongTermWeight(longTermWeight) {
    this.longTermWeight = longTermWeight;
    return this;
  }

  getDepth() {
    return this.depth;
  }

  setDepth(depth) {
    this.depth = depth;
    return this;
  }

  getDifficulty() {
    return this.difficulty;
  }

  setDifficulty(difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  getCumulativeDifficulty() {
    return this.cumulativeDifficulty;
  }

  setCumulativeDifficulty(cumulativeDifficulty) {
    this.cumulativeDifficulty = cumulativeDifficulty;
    return this;
  }

  getMajorVersion() {
    return this.majorVersion;
  }

  setMajorVersion(majorVersion) {
    this.majorVersion = majorVersion;
    return this;
  }

  getMinorVersion() {
    return this.minorVersion;
  }

  setMinorVersion(minorVersion) {
    this.minorVersion = minorVersion;
    return this;
  }

  getNonce() {
    return this.nonce;
  }

  setNonce(nonce) {
    this.nonce = nonce;
    return this;
  }

  getMinerTxHash() {
    return this.minerTxHash;
  }

  setMinerTxHash(minerTxHash) {
    this.minerTxHash = minerTxHash;
    return this;
  }

  getNumTxs() {
    return this.numTxs;
  }

  setNumTxs(numTxs) {
    this.numTxs = numTxs;
    return this;
  }

  getOrphanStatus() {
    return this.orphanStatus;
  }

  setOrphanStatus(orphanStatus) {
    this.orphanStatus = orphanStatus;
    return this;
  }

  getPrevHash() {
    return this.prevHash;
  }

  setPrevHash(prevHash) {
    this.prevHash = prevHash;
    return this;
  }

  getReward() {
    return this.reward;
  }

  setReward(reward) {
    this.reward = reward;
    return this;
  }

  getPowHash() {
    return this.powHash;
  }

  setPowHash(powHash) {
    this.powHash = powHash;
    return this;
  }

  merge(header) {
    (0, _assert.default)(header instanceof MoneroBlockHeader);
    if (this === header) return this;
    this.setHash(_GenUtils.default.reconcile(this.getHash(), header.getHash()));
    this.setHeight(_GenUtils.default.reconcile(this.getHeight(), header.getHeight(), { resolveMax: true })); // height can increase
    this.setTimestamp(_GenUtils.default.reconcile(this.getTimestamp(), header.getTimestamp(), { resolveMax: true })); // block timestamp can increase
    this.setSize(_GenUtils.default.reconcile(this.getSize(), header.getSize()));
    this.setWeight(_GenUtils.default.reconcile(this.getWeight(), header.getWeight()));
    this.setDepth(_GenUtils.default.reconcile(this.getDepth(), header.getDepth()));
    this.setDifficulty(_GenUtils.default.reconcile(this.getDifficulty(), header.getDifficulty()));
    this.setCumulativeDifficulty(_GenUtils.default.reconcile(this.getCumulativeDifficulty(), header.getCumulativeDifficulty()));
    this.setMajorVersion(_GenUtils.default.reconcile(this.getMajorVersion(), header.getMajorVersion()));
    this.setMinorVersion(_GenUtils.default.reconcile(this.getMinorVersion(), header.getMinorVersion()));
    this.setNonce(_GenUtils.default.reconcile(this.getNonce(), header.getNonce()));
    this.setMinerTxHash(_GenUtils.default.reconcile(this.getMinerTxHash(), header.getMinerTxHash()));
    this.setNumTxs(_GenUtils.default.reconcile(this.getNumTxs(), header.getNumTxs()));
    this.setOrphanStatus(_GenUtils.default.reconcile(this.getOrphanStatus(), header.getOrphanStatus()));
    this.setPrevHash(_GenUtils.default.reconcile(this.getPrevHash(), header.getPrevHash()));
    this.setReward(_GenUtils.default.reconcile(this.getReward(), header.getReward()));
    this.setPowHash(_GenUtils.default.reconcile(this.getPowHash(), header.getPowHash()));
    return this;
  }

  toString(indent = 0) {
    let str = "";
    str += _GenUtils.default.kvLine("Hash", this.getHash(), indent);
    str += _GenUtils.default.kvLine("Height", this.getHeight(), indent);
    str += _GenUtils.default.kvLine("Timestamp", this.getTimestamp(), indent);
    str += _GenUtils.default.kvLine("Size", this.getSize(), indent);
    str += _GenUtils.default.kvLine("Weight", this.getWeight(), indent);
    str += _GenUtils.default.kvLine("Depth", this.getDepth(), indent);
    str += _GenUtils.default.kvLine("Difficulty", this.getDifficulty(), indent);
    str += _GenUtils.default.kvLine("Cumulative difficulty", this.getCumulativeDifficulty(), indent);
    str += _GenUtils.default.kvLine("Major version", this.getMajorVersion(), indent);
    str += _GenUtils.default.kvLine("Minor version", this.getMinorVersion(), indent);
    str += _GenUtils.default.kvLine("Nonce", this.getNonce(), indent);
    str += _GenUtils.default.kvLine("Miner tx hash", this.getMinerTxHash(), indent);
    str += _GenUtils.default.kvLine("Num txs", this.getNumTxs(), indent);
    str += _GenUtils.default.kvLine("Orphan status", this.getOrphanStatus(), indent);
    str += _GenUtils.default.kvLine("Prev hash", this.getPrevHash(), indent);
    str += _GenUtils.default.kvLine("Reward", this.getReward(), indent);
    str += _GenUtils.default.kvLine("Pow hash", this.getPowHash(), indent);
    return str[str.length - 1] === "\n" ? str.slice(0, str.length - 1) : str; // strip last newline
  }
}exports.default = MoneroBlockHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,