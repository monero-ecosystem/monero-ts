"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; /**
 * Monero daemon info.
 */
class MoneroDaemonInfo {



































  constructor(info) {
    Object.assign(this, info);

    // deserialize bigints
    if (this.difficulty !== undefined && typeof this.difficulty !== "bigint") this.difficulty = BigInt(this.difficulty);
    if (this.cumulativeDifficulty !== undefined && typeof this.cumulativeDifficulty !== "bigint") this.cumulativeDifficulty = BigInt(this.cumulativeDifficulty);
    if (this.credits !== undefined && typeof this.credits !== "bigint") this.credits = BigInt(this.credits);
  }

  toJson() {
    let json = Object.assign([], this);
    if (json.difficulty !== undefined) json.difficulty = json.difficulty.toString();
    if (json.cumulativeDifficulty !== undefined) json.cumulativeDifficulty = json.cumulativeDifficulty.toString();
    if (json.credits !== undefined) json.credits = json.credits.toString();
    return json;
  }

  getVersion() {
    return this.version;
  }

  setVersion(version) {
    this.version = version;
    return this;
  }

  getNumAltBlocks() {
    return this.numAltBlocks;
  }

  setNumAltBlocks(numAltBlocks) {
    this.numAltBlocks = numAltBlocks;
    return this;
  }

  getBlockSizeLimit() {
    return this.blockSizeLimit;
  }

  setBlockSizeLimit(blockSizeLimit) {
    this.blockSizeLimit = blockSizeLimit;
    return this;
  }

  getBlockSizeMedian() {
    return this.blockSizeMedian;
  }

  setBlockSizeMedian(blockSizeMedian) {
    this.blockSizeMedian = blockSizeMedian;
    return this;
  }

  getBlockWeightLimit() {
    return this.blockWeightLimit;
  }

  setBlockWeightLimit(blockWeightLimit) {
    this.blockWeightLimit = blockWeightLimit;
    return this;
  }

  getBlockWeightMedian() {
    return this.blockWeightMedian;
  }

  setBlockWeightMedian(blockWeightMedian) {
    this.blockWeightMedian = blockWeightMedian;
    return this;
  }

  getBootstrapDaemonAddress() {
    return this.bootstrapDaemonAddress;
  }

  setBootstrapDaemonAddress(bootstrapDaemonAddress) {
    this.bootstrapDaemonAddress = bootstrapDaemonAddress;
    return this;
  }

  getDifficulty() {
    return this.difficulty;
  }

  setDifficulty(difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  getCumulativeDifficulty() {
    return this.cumulativeDifficulty;
  }

  setCumulativeDifficulty(cumulativeDifficulty) {
    this.cumulativeDifficulty = cumulativeDifficulty;
    return this;
  }

  getFreeSpace() {
    return this.freeSpace;
  }

  setFreeSpace(freeSpace) {
    this.freeSpace = freeSpace;
    return this;
  }

  getNumOfflinePeers() {
    return this.numOfflinePeers;
  }

  setNumOfflinePeers(numOfflinePeers) {
    this.numOfflinePeers = numOfflinePeers;
    return this;
  }

  getNumOnlinePeers() {
    return this.numOnlinePeers;
  }

  setNumOnlinePeers(numOnlinePeers) {
    this.numOnlinePeers = numOnlinePeers;
    return this;
  }

  getHeight() {
    return this.height;
  }

  setHeight(height) {
    this.height = height;
    return this;
  }

  getHeightWithoutBootstrap() {
    return this.heightWithoutBootstrap;
  }

  setHeightWithoutBootstrap(heightWithoutBootstrap) {
    this.heightWithoutBootstrap = heightWithoutBootstrap;
    return this;
  }

  getNetworkType() {
    return this.networkType;
  }

  setNetworkType(networkType) {
    this.networkType = networkType;
    return this;
  }

  getIsOffline() {
    return this.isOffline;
  }

  setIsOffline(isOffline) {
    this.isOffline = isOffline;
    return this;
  }

  getNumIncomingConnections() {
    return this.numIncomingConnections;
  }

  setNumIncomingConnections(numIncomingConnections) {
    this.numIncomingConnections = numIncomingConnections;
    return this;
  }

  getNumOutgoingConnections() {
    return this.numOutgoingConnections;
  }

  setNumOutgoingConnections(numOutgoingConnections) {
    this.numOutgoingConnections = numOutgoingConnections;
    return this;
  }

  getNumRpcConnections() {
    return this.numRpcConnections;
  }

  setNumRpcConnections(numRpcConnections) {
    this.numRpcConnections = numRpcConnections;
    return this;
  }

  getStartTimestamp() {
    return this.startTimestamp;
  }

  setStartTimestamp(startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

  getAdjustedTimestamp() {
    return this.adjustedTimestamp;
  }

  setAdjustedTimestamp(adjustedTimestamp) {
    this.adjustedTimestamp = adjustedTimestamp;
    return this;
  }

  getTarget() {
    return this.target;
  }

  setTarget(target) {
    this.target = target;
    return this;
  }

  getTargetHeight() {
    return this.targetHeight;
  }

  setTargetHeight(targetHeight) {
    this.targetHeight = targetHeight;
    return this;
  }

  getTopBlockHash() {
    return this.topBlockHash;
  }

  setTopBlockHash(topBlockHash) {
    this.topBlockHash = topBlockHash;
    return this;
  }

  getNumTxs() {
    return this.numTxs;
  }

  setNumTxs(numTxs) {
    this.numTxs = numTxs;
    return this;
  }

  getNumTxsPool() {
    return this.numTxsPool;
  }

  setNumTxsPool(numTxsPool) {
    this.numTxsPool = numTxsPool;
    return this;
  }

  getWasBootstrapEverUsed() {
    return this.wasBootstrapEverUsed;
  }

  setWasBootstrapEverUsed(wasBootstrapEverUsed) {
    this.wasBootstrapEverUsed = wasBootstrapEverUsed;
    return this;
  }

  getDatabaseSize() {
    return this.databaseSize;
  }

  setDatabaseSize(databaseSize) {
    this.databaseSize = databaseSize;
    return this;
  }

  getUpdateAvailable() {
    return this.updateAvailable;
  }

  setUpdateAvailable(updateAvailable) {
    this.updateAvailable = updateAvailable;
    return this;
  }

  getCredits() {
    return this.credits;
  }

  setCredits(credits) {
    this.credits = credits;
    return this;
  }

  getIsBusySyncing() {
    return this.isBusySyncing;
  }

  setIsBusySyncing(isBusySyncing) {
    this.isBusySyncing = isBusySyncing;
    return this;
  }

  getIsSynchronized() {
    return this.isSynchronized;
  }

  setIsSynchronized(isSynchronized) {
    this.isSynchronized = isSynchronized;
    return this;
  }

  getIsRestricted() {
    return this.isRestricted;
  }

  setIsRestricted(isRestricted) {
    this.isRestricted = isRestricted;
    return this;
  }
}exports.default = MoneroDaemonInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,