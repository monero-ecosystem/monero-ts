"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));

var _MoneroKeyImage = _interopRequireDefault(require("./MoneroKeyImage"));


/**
 * Models a Monero transaction output.
 */
class MoneroOutput {








  /**
   * Construct the model.
   * 
   * @param {MoneroOutput} [output] is existing state to initialize from (optional)
   */
  constructor(output) {
    Object.assign(this, output);

    // deserialize fields if necessary
    if (this.amount !== undefined && typeof this.amount !== "bigint") this.amount = BigInt(this.amount);
    if (this.keyImage) this.keyImage = this.keyImage instanceof _MoneroKeyImage.default ? this.keyImage.copy() : new _MoneroKeyImage.default(this.keyImage);
  }

  getTx() {
    return this.tx;
  }

  setTx(tx) {
    this.tx = tx;
    return this;
  }

  getKeyImage() {
    return this.keyImage;
  }

  setKeyImage(keyImage) {
    this.keyImage = keyImage === undefined ? undefined : keyImage instanceof _MoneroKeyImage.default ? keyImage : new _MoneroKeyImage.default(keyImage);
    return this;
  }

  getAmount() {
    return this.amount;
  }

  setAmount(amount) {
    this.amount = amount;
    return this;
  }

  getIndex() {
    return this.index;
  }

  setIndex(index) {
    this.index = index;
    return this;
  }

  getRingOutputIndices() {
    return this.ringOutputIndices;
  }

  setRingOutputIndices(ringOutputIndices) {
    this.ringOutputIndices = ringOutputIndices;
    return this;
  }

  getStealthPublicKey() {
    return this.stealthPublicKey;
  }

  setStealthPublicKey(stealthPublicKey) {
    this.stealthPublicKey = stealthPublicKey;
    return this;
  }

  copy() {
    return new MoneroOutput(this);
  }

  toJson() {
    let json = Object.assign({}, this);
    if (this.getAmount() !== undefined) json.amount = this.getAmount().toString();
    if (this.getKeyImage() !== undefined) json.keyImage = this.getKeyImage() ? this.getKeyImage().toJson() : undefined;
    delete json.tx;
    return json;
  }

  merge(output) {
    (0, _assert.default)(output instanceof MoneroOutput);
    if (this === output) return this;

    // merge txs if they're different which comes back to merging outputs
    if (this.getTx() !== output.getTx()) this.getTx().merge(output.getTx());

    // otherwise merge output fields
    else {
      if (this.getKeyImage() === undefined) this.setKeyImage(output.getKeyImage());else
      if (output.getKeyImage() !== undefined) this.getKeyImage().merge(output.getKeyImage());
      this.setAmount(_GenUtils.default.reconcile(this.getAmount(), output.getAmount()));
      this.setIndex(_GenUtils.default.reconcile(this.getIndex(), output.getIndex()));
    }

    return this;
  }

  toString(indent = 0) {
    let str = "";
    if (this.getKeyImage() !== undefined) {
      str += _GenUtils.default.kvLine("Key image", "", indent);
      str += this.getKeyImage().toString(indent + 1) + "\n";
    }
    str += _GenUtils.default.kvLine("Amount", this.getAmount(), indent);
    str += _GenUtils.default.kvLine("Index", this.getIndex(), indent);
    str += _GenUtils.default.kvLine("Ring output indices", this.getRingOutputIndices(), indent);
    str += _GenUtils.default.kvLine("Stealth public key", this.getStealthPublicKey(), indent);
    return str === "" ? str : str.slice(0, str.length - 1); // strip last newline
  }
}exports.default = MoneroOutput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,