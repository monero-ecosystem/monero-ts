"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; /**
 * Models transaction pool statistics.
 */
class MoneroTxPoolStats {















  constructor(stats) {
    Object.assign(this, stats);
    if (this.feeTotal !== undefined && typeof this.feeTotal !== "bigint") this.feeTotal = BigInt(this.feeTotal);
    if (this.histo !== undefined && !(this.histo instanceof Map)) this.histo = new Map(JSON.parse(this.histo));
  }

  toJson() {
    let json = Object.assign({}, this);
    if (json.feeTotal) json.feeTotal = json.feeTotal.toString();
    if (json.histo) json.histo = JSON.stringify([...json.histo]); // convert map to array of key-value pairs then stringify
    return json;
  }

  getNumTxs() {
    return this.numTxs;
  }

  setNumTxs(numTxs) {
    this.numTxs = numTxs;
    return this;
  }

  getNumNotRelayed() {
    return this.numNotRelayed;
  }

  setNumNotRelayed(numNotRelayed) {
    this.numNotRelayed = numNotRelayed;
    return this;
  }

  getNumFailing() {
    return this.numFailing;
  }

  setNumFailing(numFailing) {
    this.numFailing = numFailing;
    return this;
  }

  getNumDoubleSpends() {
    return this.numDoubleSpends;
  }

  setNumDoubleSpends(numDoubleSpends) {
    this.numDoubleSpends = numDoubleSpends;
    return this;
  }

  getNum10m() {
    return this.num10m;
  }

  setNum10m(num10m) {
    this.num10m = num10m;
    return this;
  }

  getFeeTotal() {
    return this.feeTotal;
  }

  setFeeTotal(feeTotal) {
    this.feeTotal = feeTotal;
    return this;
  }

  getBytesMax() {
    return this.bytesMax;
  }

  setBytesMax(bytesMax) {
    this.bytesMax = bytesMax;
    return this;
  }

  getBytesMed() {
    return this.bytesMed;
  }

  setBytesMed(bytesMed) {
    this.bytesMed = bytesMed;
    return this;
  }

  getBytesMin() {
    return this.bytesMin;
  }

  setBytesMin(bytesMin) {
    this.bytesMin = bytesMin;
    return this;
  }

  getBytesTotal() {
    return this.bytesTotal;
  }

  setBytesTotal(bytesTotal) {
    this.bytesTotal = bytesTotal;
    return this;
  }

  getHisto() {
    return this.histo;
  }

  setHisto(histo) {
    this.histo = histo;
    return this;
  }

  getHisto98pc() {
    return this.histo98pc;
  }

  setHisto98pc(histo98pc) {
    this.histo98pc = histo98pc;
    return this;
  }

  getOldestTimestamp() {
    return this.oldestTimestamp;
  }

  setOldestTimestamp(oldestTimestamp) {
    this.oldestTimestamp = oldestTimestamp;
    return this;
  }
}exports.default = MoneroTxPoolStats;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,