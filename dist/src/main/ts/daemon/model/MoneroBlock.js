"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));
var _MoneroBlockHeader = _interopRequireDefault(require("./MoneroBlockHeader"));
var _MoneroTx = _interopRequireDefault(require("./MoneroTx"));
var _MoneroTxQuery = _interopRequireDefault(require("../../wallet/model/MoneroTxQuery"));
var _MoneroTxWallet = _interopRequireDefault(require("../../wallet/model/MoneroTxWallet"));

/**
 * Enumerates types to deserialize to.
 */var
DeserializationType = /*#__PURE__*/function (DeserializationType) {DeserializationType[DeserializationType["TX"] = 0] = "TX";DeserializationType[DeserializationType["TX_WALLET"] = 1] = "TX_WALLET";DeserializationType[DeserializationType["TX_QUERY"] = 2] = "TX_QUERY";return DeserializationType;}(DeserializationType || {});





/**
 * Models a Monero block in the blockchain.
 */
class MoneroBlock extends _MoneroBlockHeader.default {

  static DeserializationType = DeserializationType;






  constructor(block, txType) {
    super(block);

    // copy miner tx
    if (this.minerTx) {
      this.minerTx = this.deserializeTx(this.minerTx, txType).setBlock(this);
    }

    // copy non-miner txs
    if (this.txs) {
      this.txs = this.txs.slice();
      for (let i = 0; i < this.txs.length; i++) {
        this.txs[i] = this.deserializeTx(this.txs[i], txType).setBlock(this);
      }
    }
  }

  getHex() {
    return this.hex;
  }

  setHex(hex) {
    this.hex = hex;
    return this;
  }

  getMinerTx() {
    return this.minerTx;
  }

  setMinerTx(minerTx) {
    this.minerTx = minerTx;
    return this;
  }

  getTxs() {
    return this.txs;
  }

  setTxs(txs) {
    this.txs = txs;
    return this;
  }

  getTxHashes() {
    return this.txHashes;
  }

  setTxHashes(txHashes) {
    this.txHashes = txHashes;
    return this;
  }

  copy() {
    return new MoneroBlock(this);
  }

  toJson() {
    let json = super.toJson();
    if (this.getMinerTx() !== undefined) json.minerTx = this.getMinerTx().toJson();
    if (this.getTxs() !== undefined) {
      json.txs = [];
      for (let tx of this.getTxs()) json.txs.push(tx.toJson());
    }
    return json;
  }

  merge(block) {
    (0, _assert.default)(block instanceof MoneroBlock);
    if (this === block) return this;

    // merge header fields
    super.merge(block);

    // merge reconcilable block extensions
    this.setHex(_GenUtils.default.reconcile(this.getHex(), block.getHex()));
    this.setTxHashes(_GenUtils.default.reconcile(this.getTxHashes(), block.getTxHashes()));

    // merge miner tx
    if (this.getMinerTx() === undefined) this.setMinerTx(block.getMinerTx());
    if (block.getMinerTx() !== undefined) {
      block.getMinerTx().setBlock(this);
      this.getMinerTx().merge(block.getMinerTx());
    }

    // merge non-miner txs
    if (block.getTxs() !== undefined) {
      for (let tx of block.getTxs()) {
        tx.setBlock(this);
        MoneroBlock.mergeTx(this.getTxs(), tx);
      }
    }

    return this;
  }

  toString(indent = 0) {
    let str = super.toString(indent) + "\n";
    str += _GenUtils.default.kvLine("Hex", this.getHex(), indent);
    if (this.getTxs() !== undefined) {
      str += _GenUtils.default.kvLine("Txs", "", indent);
      for (let tx of this.getTxs()) {
        str += tx.toString(indent + 1) + "\n";
      }
    }
    if (this.getMinerTx() !== undefined) {
      str += _GenUtils.default.kvLine("Miner tx", "", indent);
      str += this.getMinerTx().toString(indent + 1) + "\n";
    }
    str += _GenUtils.default.kvLine("Txs hashes", this.getTxHashes(), indent);
    return str[str.length - 1] === "\n" ? str.slice(0, str.length - 1) : str; // strip last newline
  }

  // helper to merge txs
  static mergeTx(txs, tx) {
    for (let aTx of txs) {
      if (aTx.getHash() === tx.getHash()) {
        aTx.merge(tx);
        return;
      }
    }
    txs.push(tx);
  }

  // -------------------- OVERRIDE COVARIANT RETURN TYPES ---------------------

  setHeight(height) {
    super.setHeight(height);
    return this;
  }

  setTimestamp(timestamp) {
    super.setTimestamp(timestamp);
    return this;
  }

  setSize(size) {
    super.setSize(size);
    return this;
  }

  setWeight(weight) {
    super.setWeight(weight);
    return this;
  }

  setLongTermWeight(longTermWeight) {
    super.setLongTermWeight(longTermWeight);
    return this;
  }

  setDepth(depth) {
    super.setDepth(depth);
    return this;
  }

  setDifficulty(difficulty) {
    super.setDifficulty(difficulty);
    return this;
  }

  setCumulativeDifficulty(cumulativeDifficulty) {
    super.setCumulativeDifficulty(cumulativeDifficulty);
    return this;
  }

  setMajorVersion(majorVersion) {
    super.setMajorVersion(majorVersion);
    return this;
  }

  setMinorVersion(minorVersion) {
    super.setMinorVersion(minorVersion);
    return this;
  }

  setNonce(nonce) {
    super.setNonce(nonce);
    return this;
  }

  setMinerTxHash(minerTxHash) {
    super.setMinerTxHash(minerTxHash);
    return this;
  }

  setNumTxs(numTxs) {
    super.setNumTxs(numTxs);
    return this;
  }

  setOrphanStatus(orphanStatus) {
    super.setOrphanStatus(orphanStatus);
    return this;
  }

  setPrevHash(prevHash) {
    super.setPrevHash(prevHash);
    return this;
  }

  setReward(reward) {
    super.setReward(reward);
    return this;
  }

  setPowHash(powHash) {
    super.setPowHash(powHash);
    return this;
  }

  deserializeTx(tx, txType) {
    if (txType === undefined) {
      if (!(tx instanceof _MoneroTx.default)) throw new Error("Must provide DeserializationType if tx is not instanceof MoneroTx");
      return tx.copy();
    } else if (txType === MoneroBlock.DeserializationType.TX || txType === undefined) {
      return new _MoneroTx.default(tx);
    } else if (txType === MoneroBlock.DeserializationType.TX_WALLET) {
      return new _MoneroTxWallet.default(tx);
    } else if (txType === MoneroBlock.DeserializationType.TX_QUERY) {
      return new _MoneroTxQuery.default(tx);
    } else {
      throw new Error("Unrecognized tx deserialization type: " + txType);
    }
  }
}exports.default = MoneroBlock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,