"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;

/**
 * Models a peer to the daemon.
 */
class MoneroPeer {



























  constructor(peer) {
    Object.assign(this, peer);
    if (this.rpcCreditsPerHash !== undefined && typeof this.rpcCreditsPerHash !== "bigint") this.rpcCreditsPerHash = BigInt(this.rpcCreditsPerHash);
  }

  toJson() {
    let json = Object.assign({}, this);
    if (json.rpcCreditsPerHash !== undefined) json.rpcCreditsPerHash = json.rpcCreditsPerHash.toString();
    return json;
  }

  getId() {
    return this.id;
  }

  setId(id) {
    this.id = id;
    return this;
  }

  getAddress() {
    return this.address;
  }

  setAddress(address) {
    this.address = address;
    return this;
  }

  getHost() {
    return this.host;
  }

  setHost(host) {
    this.host = host;
    return this;
  }

  getPort() {
    return this.port;
  }

  setPort(port) {
    this.port = port;
    return this;
  }

  /**
   * Indicates if the peer was online when last checked (aka "white listed" as
   * opposed to "gray listed").
   * 
   * @return {boolean} true if peer was online when last checked, false otherwise
   */
  getIsOnline() {
    return this.isOnline;
  }

  setIsOnline(isOnline) {
    this.isOnline = isOnline;
    return this;
  }

  getLastSeenTimestamp() {
    return this.lastSeenTimestamp;
  }

  setLastSeenTimestamp(lastSeenTimestamp) {
    this.lastSeenTimestamp = lastSeenTimestamp;
    return this;
  }

  getPruningSeed() {
    return this.pruningSeed;
  }

  setPruningSeed(pruningSeed) {
    this.pruningSeed = pruningSeed;
    return this;
  }

  getRpcPort() {
    return this.rpcPort;
  }

  setRpcPort(rpcPort) {
    this.rpcPort = rpcPort;
    return this;
  }

  getRpcCreditsPerHash() {
    return this.rpcCreditsPerHash;
  }

  setRpcCreditsPerHash(rpcCreditsPerHash) {
    this.rpcCreditsPerHash = rpcCreditsPerHash;
    return this;
  }

  getAvgDownload() {
    return this.avgDownload;
  }

  setAvgDownload(avgDownload) {
    this.avgDownload = avgDownload;
    return this;
  }

  getAvgUpload() {
    return this.avgUpload;
  }

  setAvgUpload(avgUpload) {
    this.avgUpload = avgUpload;
    return this;
  }

  getCurrentDownload() {
    return this.currentDownload;
  }

  setCurrentDownload(currentDownload) {
    this.currentDownload = currentDownload;
    return this;
  }

  getCurrentUpload() {
    return this.currentUpload;
  }

  setCurrentUpload(currentUpload) {
    this.currentUpload = currentUpload;
    return this;
  }

  getHeight() {
    return this.height;
  }

  setHeight(height) {
    this.height = height;
    return this;
  }

  getIsIncoming() {
    return this.isIncoming;
  }

  setIsIncoming(isIncoming) {
    this.isIncoming = isIncoming;
    return this;
  }

  getLiveTime() {
    return this.liveTime;
  }

  setLiveTime(liveTime) {
    this.liveTime = liveTime;
    return this;
  }

  getIsLocalIp() {
    return this.isLocalIp;
  }

  setIsLocalIp(isLocalIp) {
    this.isLocalIp = isLocalIp;
    return this;
  }

  getIsLocalHost() {
    return this.isLocalHost;
  }

  setIsLocalHost(isLocalHost) {
    this.isLocalHost = isLocalHost;
    return this;
  }

  getNumReceives() {
    return this.numReceives;
  }

  setNumReceives(numReceives) {
    this.numReceives = numReceives;
    return this;
  }

  getNumSends() {
    return this.numSends;
  }

  setNumSends(numSends) {
    this.numSends = numSends;
    return this;
  }

  getReceiveIdleTime() {
    return this.receiveIdleTime;
  }

  setReceiveIdleTime(receiveIdleTime) {
    this.receiveIdleTime = receiveIdleTime;
    return this;
  }

  getSendIdleTime() {
    return this.sendIdleTime;
  }

  setSendIdleTime(sendIdleTime) {
    this.sendIdleTime = sendIdleTime;
    return this;
  }

  getState() {
    return this.state;
  }

  setState(state) {
    this.state = state;
    return this;
  }

  getNumSupportFlags() {
    return this.numSupportFlags;
  }

  setNumSupportFlags(numSupportFlags) {
    this.numSupportFlags = numSupportFlags;
    return this;
  }

  getType() {
    return this.type;
  }

  setType(type) {
    this.type = type;
    return this;
  }
}exports.default = MoneroPeer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,