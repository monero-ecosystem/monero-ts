"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _MoneroConnectionSpan = _interopRequireDefault(require("./MoneroConnectionSpan"));
var _MoneroPeer = _interopRequireDefault(require("./MoneroPeer"));

/**
 * Models daemon synchronization information.
 */
class MoneroDaemonSyncInfo {










  constructor(info) {
    Object.assign(this, info);

    // deserialize bigints
    if (this.credits !== undefined && typeof this.credits !== "bigint") this.credits = BigInt(this.credits);

    // copy peers
    if (this.peers) {
      for (let i = 0; i < this.peers.length; i++) {
        this.peers[i] = new _MoneroPeer.default(this.peers[i]);
      }
    }

    // copy spans
    if (this.spans) {
      for (let i = 0; i < this.spans.length; i++) {
        this.spans[i] = new _MoneroConnectionSpan.default(this.spans[i]);
      }
    }
  }

  toJson() {
    let json = Object.assign({}, this);
    if (json.peers !== undefined) {
      for (let i = 0; i < json.peers.length; i++) {
        json.peers[i] = json.peers[i].toJson();
      }
    }
    if (json.spans !== undefined) {
      for (let i = 0; i < json.spans.length; i++) {
        json.spans[i] = json.spans[i].toJson();
      }
    }
    if (json.credits !== undefined) json.credits = json.credits.toString();
    return json;
  }

  getHeight() {
    return this.height;
  }

  setHeight(height) {
    this.height = height;
    return this;
  }

  getPeers() {
    return this.peers;
  }

  setPeers(peers) {
    this.peers = peers;
    return this;
  }

  getSpans() {
    return this.spans;
  }

  setSpans(spans) {
    this.spans = spans;
    return this;
  }

  getTargetHeight() {
    return this.targetHeight;
  }

  setTargetHeight(targetHeight) {
    this.targetHeight = targetHeight;
    return this;
  }

  getNextNeededPruningSeed() {
    return this.nextNeededPruningSeed;
  }

  setNextNeededPruningSeed(nextNeededPruningSeed) {
    this.nextNeededPruningSeed = nextNeededPruningSeed;
    return this;
  }

  getOverview() {
    return this.overview;
  }

  setOverview(overview) {
    this.overview = overview;
    return this;
  }

  getCredits() {
    return this.credits;
  }

  setCredits(credits) {
    this.credits = credits;
    return this;
  }

  getTopBlockHash() {
    return this.topBlockHash;
  }

  setTopBlockHash(topBlockHash) {
    this.topBlockHash = topBlockHash;
    return this;
  }
}exports.default = MoneroDaemonSyncInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,