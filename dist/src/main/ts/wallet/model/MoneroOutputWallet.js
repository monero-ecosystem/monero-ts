"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));
var _MoneroError = _interopRequireDefault(require("../../common/MoneroError"));

var _MoneroOutput = _interopRequireDefault(require("../../daemon/model/MoneroOutput"));

var _MoneroTxWallet = _interopRequireDefault(require("./MoneroTxWallet"));

/**
 * Models a Monero output with wallet extensions.
 */
class MoneroOutputWallet extends _MoneroOutput.default {







  /**
   * Construct the model.
   * 
   * @param {MoneroOutputWallet} [output] is existing state to initialize from (optional)
   */
  constructor(output) {
    super(output);
  }

  getTx() {
    return super.getTx();
  }

  setTx(tx) {
    if (tx !== undefined && !(tx instanceof _MoneroTxWallet.default)) throw new _MoneroError.default("Wallet output's transaction must be of type MoneroTxWallet");
    super.setTx(tx);
    return this;
  }

  getAccountIndex() {
    return this.accountIndex;
  }

  setAccountIndex(accountIndex) {
    this.accountIndex = accountIndex;
    return this;
  }

  getSubaddressIndex() {
    return this.subaddressIndex;
  }

  setSubaddressIndex(subaddressIndex) {
    this.subaddressIndex = subaddressIndex;
    return this;
  }

  getIsSpent() {
    return this.isSpent;
  }

  setIsSpent(isSpent) {
    this.isSpent = isSpent;
    return this;
  }

  /**
   * Indicates if this output has been deemed 'malicious' and will therefore
   * not be spent by the wallet.
   * 
   * @return Boolean is whether or not this output is frozen
   */
  getIsFrozen() {
    return this.isFrozen;
  }

  setIsFrozen(isFrozen) {
    this.isFrozen = isFrozen;
    return this;
  }

  getIsLocked() {
    if (this.getTx() === undefined) return undefined;
    return this.getTx().getIsLocked();
  }

  copy() {
    return new MoneroOutputWallet(this.toJson());
  }

  toJson() {
    let json = Object.assign({}, this, super.toJson());
    delete json.tx;
    return json;
  }

  /**
   * Updates this output by merging the latest information from the given
   * output.
   * 
   * Merging can modify or build references to the output given so it
   * should not be re-used or it should be copied before calling this method.
   * 
   * @param output is the output to merge into this one
   */
  merge(output) {
    (0, _assert.default)(output instanceof MoneroOutputWallet);
    if (this === output) return;
    super.merge(output);
    this.setAccountIndex(_GenUtils.default.reconcile(this.getAccountIndex(), output.getAccountIndex()));
    this.setSubaddressIndex(_GenUtils.default.reconcile(this.getSubaddressIndex(), output.getSubaddressIndex()));
    this.setIsSpent(_GenUtils.default.reconcile(this.getIsSpent(), output.getIsSpent(), { resolveTrue: true })); // output can become spent
    this.setIsFrozen(_GenUtils.default.reconcile(this.getIsFrozen(), output.getIsFrozen()));
    return this;
  }

  toString(indent = 0) {
    let str = super.toString(indent) + "\n";
    str += _GenUtils.default.kvLine("Account index", this.getAccountIndex(), indent);
    str += _GenUtils.default.kvLine("Subaddress index", this.getSubaddressIndex(), indent);
    str += _GenUtils.default.kvLine("Is spent", this.getIsSpent(), indent);
    str += _GenUtils.default.kvLine("Is frozen", this.getIsFrozen(), indent);
    return str.slice(0, str.length - 1); // strip last newline
  }

  // -------------------- OVERRIDE COVARIANT RETURN TYPES ---------------------

  setKeyImage(keyImage) {
    super.setKeyImage(keyImage);
    return this;
  }

  setAmount(amount) {
    super.setAmount(amount);
    return this;
  }

  setIndex(index) {
    super.setIndex(index);
    return this;
  }

  setRingOutputIndices(ringOutputIndices) {
    super.setRingOutputIndices(ringOutputIndices);
    return this;
  }

  setStealthPublicKey(stealthPublicKey) {
    super.setStealthPublicKey(stealthPublicKey);
    return this;
  }
}exports.default = MoneroOutputWallet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,