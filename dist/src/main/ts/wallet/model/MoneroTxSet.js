"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));
var _MoneroTxWallet = _interopRequireDefault(require("./MoneroTxWallet"));
var _MoneroUtils = _interopRequireDefault(require("../../common/MoneroUtils"));

/**
 * Groups transactions who share common hex data which is needed in order to
 * sign and submit the transactions.
 * 
 * For example, multisig transactions created from createTxs() share a common
 * hex string which is needed in order to sign and submit the multisig
 * transactions.
 */
class MoneroTxSet {






  constructor(txSet) {
    Object.assign(this, txSet);

    // copy txs
    if (this.txs) {
      for (let i = 0; i < this.txs.length; i++) {
        this.txs[i] = new _MoneroTxWallet.default(this.txs[i]);
        this.txs[i].setTxSet(this);
      }
    }
  }

  toJson() {
    let json = Object.assign({}, this); // copy state
    if (this.getTxs() !== undefined) {
      json.txs = [];
      for (let tx of this.getTxs()) json.txs.push(tx.toJson());
    }
    return json;
  }

  getTxs() {
    return this.txs;
  }

  setTxs(txs) {
    this.txs = txs;
    return this;
  }

  getMultisigTxHex() {
    return this.multisigTxHex;
  }

  setMultisigTxHex(multisigTxHex) {
    this.multisigTxHex = multisigTxHex;
    return this;
  }

  getUnsignedTxHex() {
    return this.unsignedTxHex;
  }

  setUnsignedTxHex(unsignedTxHex) {
    this.unsignedTxHex = unsignedTxHex;
    return this;
  }

  getSignedTxHex() {
    return this.signedTxHex;
  }

  setSignedTxHex(signedTxHex) {
    this.signedTxHex = signedTxHex;
    return this;
  }

  merge(txSet) {
    (0, _assert.default)(txSet instanceof MoneroTxSet);
    if (this === txSet) return this;

    // merge sets
    this.setMultisigTxHex(_GenUtils.default.reconcile(this.getMultisigTxHex(), txSet.getMultisigTxHex()));
    this.setUnsignedTxHex(_GenUtils.default.reconcile(this.getUnsignedTxHex(), txSet.getUnsignedTxHex()));
    this.setSignedTxHex(_GenUtils.default.reconcile(this.getSignedTxHex(), txSet.getSignedTxHex()));

    // merge txs
    if (txSet.getTxs() !== undefined) {
      for (let tx of txSet.getTxs()) {
        tx.setTxSet(this);
        _MoneroUtils.default.mergeTx(this.getTxs(), tx);
      }
    }

    return this;
  }

  toString(indent = 0) {
    let str = "";
    str += _GenUtils.default.kvLine("Multisig tx hex: ", this.getMultisigTxHex(), indent);
    str += _GenUtils.default.kvLine("Unsigned tx hex: ", this.getUnsignedTxHex(), indent);
    str += _GenUtils.default.kvLine("Signed tx hex: ", this.getSignedTxHex(), indent);
    if (this.getTxs() !== undefined) {
      str += _GenUtils.default.kvLine("Txs", "", indent);
      for (let tx of this.getTxs()) {
        str += tx.toString(indent + 1) + "\n";
      }
    }
    return str;
  }
}exports.default = MoneroTxSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,