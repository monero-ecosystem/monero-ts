"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));
var _MoneroError = _interopRequireDefault(require("../../common/MoneroError"));


/**
 * Models a base transfer of funds to or from the wallet.
 */
class MoneroTransfer {





  /**
   * Construct the transfer.
   * 
   * @param {Partial<MoneroTransfer>} transfer existing state to initialize from (optional)
   */
  constructor(transfer) {
    Object.assign(this, transfer);
    if (this.amount !== undefined && typeof this.amount !== "bigint") this.amount = BigInt(this.amount);
    this.validate();
  }

  copy() {
    return new MoneroTransfer(this);
  }

  toJson() {
    let json = Object.assign({}, this);
    if (this.getAmount() !== undefined) json.amount = this.getAmount().toString();
    delete json.tx; // parent tx is not serialized
    return json;
  }

  getTx() {
    return this.tx;
  }

  setTx(tx) {
    this.tx = tx;
    return this;
  }

  getIsOutgoing() {
    let isIncoming = this.getIsIncoming();
    (0, _assert.default)(typeof isIncoming === "boolean");
    return !isIncoming;
  }

  getIsIncoming() {
    throw new Error("Subclass must implement");
  }

  getAccountIndex() {
    return this.accountIndex;
  }

  setAccountIndex(accountIndex) {
    this.accountIndex = accountIndex;
    this.validate();
    return this;
  }

  getAmount() {
    return this.amount;
  }

  setAmount(amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Updates this transaction by merging the latest information from the given
   * transaction.
   * 
   * Merging can modify or build references to the transfer given so it
   * should not be re-used or it should be copied before calling this method.
   * 
   * @param transfer is the transfer to merge into this one
   * @return {MoneroTransfer} the merged transfer
   */
  merge(transfer) {
    (0, _assert.default)(transfer instanceof MoneroTransfer);
    if (this === transfer) return this;

    // merge transactions if they're different which comes back to merging transfers
    if (this.getTx() !== transfer.getTx()) {
      this.getTx().merge(transfer.getTx());
      return this;
    }

    // otherwise merge transfer fields
    this.setAccountIndex(_GenUtils.default.reconcile(this.getAccountIndex(), transfer.getAccountIndex()));

    // TODO monero-project: failed tx in pool (after testUpdateLockedDifferentAccounts()) causes non-originating saved wallets to return duplicate incoming transfers but one has amount of 0
    if (this.getAmount() !== undefined && transfer.getAmount() !== undefined && this.getAmount() !== transfer.getAmount() && (this.getAmount() === 0n || transfer.getAmount() === 0n)) {
      console.warn("monero-project returning transfers with 0 amount/numSuggestedConfirmations");
    } else {
      this.setAmount(_GenUtils.default.reconcile(this.getAmount(), transfer.getAmount()));
    }

    return this;
  }

  toString(indent = 0) {
    let str = "";
    str += _GenUtils.default.kvLine("Is incoming", this.getIsIncoming(), indent);
    str += _GenUtils.default.kvLine("Account index", this.getAccountIndex(), indent);
    str += _GenUtils.default.kvLine("Amount", this.getAmount() ? this.getAmount().toString() : undefined, indent);
    return str === "" ? str : str.slice(0, str.length - 1); // strip last newline
  }

  validate() {
    if (this.getAccountIndex() !== undefined && this.getAccountIndex() < 0) throw new _MoneroError.default("Account index must be >= 0");
  }
}exports.default = MoneroTransfer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,