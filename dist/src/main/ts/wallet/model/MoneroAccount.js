"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));
var _MoneroSubaddress = _interopRequireDefault(require("./MoneroSubaddress"));

/**
 * Monero account model.
 */
class MoneroAccount {









  constructor(account) {
    Object.assign(this, account);

    // deserialize balances
    if (this.balance !== undefined && typeof this.balance !== "bigint") this.balance = BigInt(this.balance);
    if (this.unlockedBalance !== undefined && typeof this.unlockedBalance !== "bigint") this.unlockedBalance = BigInt(this.unlockedBalance);

    // copy subaddresses
    if (this.subaddresses) {
      for (let i = 0; i < this.subaddresses.length; i++) {
        this.subaddresses[i] = new _MoneroSubaddress.default(this.subaddresses[i]);
      }
    }
  }

  toJson() {
    let json = Object.assign({}, this);
    if (json.balance !== undefined) json.balance = json.balance.toString();
    if (json.unlockedBalance !== undefined) json.unlockedBalance = json.unlockedBalance.toString();
    if (json.subaddresses !== undefined) {
      for (let i = 0; i < json.subaddresses.length; i++) {
        json.subaddresses[i] = json.subaddresses[i].toJson();
      }
    }
    return json;
  }

  getIndex() {
    return this.index;
  }

  setIndex(index) {
    this.index = index;
    return this;
  }

  getPrimaryAddress() {
    return this.primaryAddress;
  }

  setPrimaryAddress(primaryAddress) {
    this.primaryAddress = primaryAddress;
    return this;
  }

  getBalance() {
    return this.balance;
  }

  setBalance(balance) {
    this.balance = balance;
    return this;
  }

  getUnlockedBalance() {
    return this.unlockedBalance;
  }

  setUnlockedBalance(unlockedBalance) {
    this.unlockedBalance = unlockedBalance;
    return this;
  }

  getLabel() {
    return this.label;
  }

  setLabel(label) {
    this.label = label;
    return this;
  }

  getTag() {
    return this.tag;
  }

  setTag(tag) {
    this.tag = tag;
    return this;
  }

  getSubaddresses() {
    return this.subaddresses;
  }

  setSubaddresses(subaddresses) {
    (0, _assert.default)(subaddresses === undefined || Array.isArray(subaddresses), "Given subaddresses must be undefined or an array of subaddresses");
    this.subaddresses = subaddresses;
    if (subaddresses) {
      for (let subaddress of subaddresses) {
        subaddress.setAccountIndex(this.index);
      }
    }
    return this;
  }

  toString(indent = 0) {
    let str = "";
    str += _GenUtils.default.kvLine("Index", this.getIndex(), indent);
    str += _GenUtils.default.kvLine("Primary address", this.getPrimaryAddress(), indent);
    str += _GenUtils.default.kvLine("Balance", this.getBalance(), indent);
    str += _GenUtils.default.kvLine("Unlocked balance", this.getUnlockedBalance(), indent);
    str += _GenUtils.default.kvLine("Label", this.getTag(), indent);
    str += _GenUtils.default.kvLine("Tag", this.getTag(), indent);
    if (this.getSubaddresses() !== undefined) {
      str += _GenUtils.default.kvLine("Subaddresses", "", indent);
      for (let i = 0; i < this.getSubaddresses().length; i++) {
        str += _GenUtils.default.kvLine(i + 1, "", indent + 1);
        str += this.getSubaddresses()[i].toString(indent + 2) + "\n";
      }
    }
    return str.slice(0, str.length - 1); // strip last newline
  }
}exports.default = MoneroAccount;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,