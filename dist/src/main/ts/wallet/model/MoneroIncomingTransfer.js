"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));
var _MoneroTransfer = _interopRequireDefault(require("./MoneroTransfer"));


/**
 * Models an incoming transfer of funds to the wallet.
 */
class MoneroIncomingTransfer extends _MoneroTransfer.default {





  /**
   * Construct the transfer.
   * 
   * @param {MoneroTransfer} [transfer] is existing state to initialize from (optional)
   */
  constructor(transfer) {
    super(transfer);
  }

  getIsIncoming() {
    return true;
  }

  getSubaddressIndex() {
    return this.subaddressIndex;
  }

  setSubaddressIndex(subaddressIndex) {
    this.subaddressIndex = subaddressIndex;
    return this;
  }

  getAddress() {
    return this.address;
  }

  setAddress(address) {
    this.address = address;
    return this;
  }

  /**
   * Return how many confirmations till it's not economically worth re-writing the chain.
   * That is, the number of confirmations before the transaction is highly unlikely to be
   * double spent or overwritten and may be considered settled, e.g. for a merchant to trust
   * as finalized.
   * 
   * @return {number} is the number of confirmations before it's not worth rewriting the chain
   */
  getNumSuggestedConfirmations() {
    return this.numSuggestedConfirmations;
  }

  setNumSuggestedConfirmations(numSuggestedConfirmations) {
    this.numSuggestedConfirmations = numSuggestedConfirmations;
    return this;
  }

  copy() {
    return new MoneroIncomingTransfer(this.toJson());
  }

  /**
   * Updates this transaction by merging the latest information from the given
   * transaction.
   * 
   * Merging can modify or build references to the transfer given so it
   * should not be re-used or it should be copied before calling this method.
   * 
   * @param {MoneroIncomingTransfer} transfer is the transfer to merge into this one
   * @return {MoneroIncomingTransfer}
   */
  merge(transfer) {
    super.merge(transfer);
    (0, _assert.default)(transfer instanceof MoneroIncomingTransfer);
    if (this === transfer) return this;
    this.setSubaddressIndex(_GenUtils.default.reconcile(this.getSubaddressIndex(), transfer.getSubaddressIndex()));
    this.setAddress(_GenUtils.default.reconcile(this.getAddress(), transfer.getAddress()));
    this.setNumSuggestedConfirmations(_GenUtils.default.reconcile(this.getNumSuggestedConfirmations(), transfer.getNumSuggestedConfirmations(), { resolveMax: false }));
    return this;
  }

  toString(indent = 0) {
    let str = super.toString(indent) + "\n";
    str += _GenUtils.default.kvLine("Subaddress index", this.getSubaddressIndex(), indent);
    str += _GenUtils.default.kvLine("Address", this.getAddress(), indent);
    str += _GenUtils.default.kvLine("Num suggested confirmations", this.getNumSuggestedConfirmations(), indent);
    return str.slice(0, str.length - 1); // strip last newline
  }

  // -------------------- OVERRIDE COVARIANT RETURN TYPES ---------------------

  setTx(tx) {
    super.setTx(tx);
    return this;
  }

  setAmount(amount) {
    super.setAmount(amount);
    return this;
  }

  setAccountIndex(accountIndex) {
    super.setAccountIndex(accountIndex);
    return this;
  }
}exports.default = MoneroIncomingTransfer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,