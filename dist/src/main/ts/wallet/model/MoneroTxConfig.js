"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _MoneroDestination = _interopRequireDefault(require("./MoneroDestination"));
var _MoneroError = _interopRequireDefault(require("../../common/MoneroError"));


/**
 * Configures a transaction to send, sweep, or create a payment URI.
 */
class MoneroTxConfig {

  /** Single destination address (required unless `destinations` provided). */


  /** Single destination amount (required unless `destinations provided). */


  /** Source account index to transfer funds from (required unless sweeping key image). */


  /** Source subaddress index to send funds from (default all). */


  /** Source subaddresses to send funds from (default all). */


  /** Relay the transaction to peers to commit to the blockchain if true (default false). */


  /** Transaction priority to adjust the miner fee (default MoneroTxPriority.NORMAL). */


  /** Multiple destinations to send funds to, if applicable. */


  /** List of destination indices to split the miner fee (optional). */


  /** Payment ID for the transaction. */


  /** Minimum height or timestamp for the transaction to unlock (default 0). */


  /** Miner fee (calculated automatically). */


  /** Transaction note saved locally with the wallet (optional). */


  /** Recipient name saved locally with the wallet (optional). */


  /** Allow funds to be transferred using multiple transactions if necessary (default false). */


  /** For sweep requests, include outputs below this amount when sweeping wallet, account, subaddress, or all unlocked funds. */


  /** For sweep requests, sweep each subaddress individually instead of together if true. */


  /** For sweep requests, key image of the output to sweep. */


  /**
   * <p>Generic request to transfer funds from a wallet.</p>
   * 
   * <p>Example:</p>
   * 
   * <code>
   * let config1 = new MoneroTxConfig({<br>
   * &nbsp;&nbsp; accountIndex: 0,<br>
   * &nbsp;&nbsp; address: "59aZULsUF3YN...",<br>
   * &nbsp;&nbsp; amount: 500000n,<br>
   * &nbsp;&nbsp; priority: MoneroTxPriority.NORMAL,<br>
   * &nbsp;&nbsp; relay: true<br>
   * });
   * </code>
   * 
   * @param {Partial<MoneroTxConfig>} [config] - configures the transaction to create (optional)
   * @param {string} [config.address] - single destination address
   * @param {bigint} [config.amount] - single destination amount
   * @param {number} [config.accountIndex] - source account index to transfer funds from
   * @param {number} [config.subaddressIndex] - source subaddress index to transfer funds from
   * @param {number[]} [config.subaddressIndices] - source subaddress indices to transfer funds from
   * @param {boolean} [config.relay] - relay the transaction to peers to commit to the blockchain
   * @param {MoneroTxPriority} [config.priority] - transaction priority (default MoneroTxPriority.NORMAL)
   * @param {MoneroDestination[]} [config.destinations] - addresses and amounts in a multi-destination tx
   * @param {number[]} [config.subtractFeeFrom] - list of destination indices to split the transaction fee
   * @param {string} [config.paymentId] - transaction payment ID
   * @param {bigint} [config.unlockTime] - minimum height or timestamp for the transaction to unlock (default 0)
   * @param {string} [config.note] - transaction note saved locally with the wallet
   * @param {string} [config.recipientName] - recipient name saved locally with the wallet
   * @param {boolean} [config.canSplit] - allow funds to be transferred using multiple transactions
   * @param {bigint} [config.belowAmount] - for sweep requests, include outputs below this amount when sweeping wallet, account, subaddress, or all unlocked funds 
   * @param {boolean} [config.sweepEachSubaddress] - for sweep requests, sweep each subaddress individually instead of together if true
   * @param {string} [config.keyImage] - key image to sweep (ignored except in sweepOutput() requests)
   */
  constructor(config) {
    Object.assign(this, config);

    // deserialize bigints
    if (this.amount !== undefined && typeof this.amount !== "bigint") this.amount = BigInt(this.amount);
    if (this.fee !== undefined && typeof this.fee !== "bigint") this.fee = BigInt(this.fee);
    if (this.unlockTime !== undefined && typeof this.unlockTime !== "bigint") this.unlockTime = BigInt(this.unlockTime);
    if (this.belowAmount !== undefined && typeof this.belowAmount !== "bigint") this.belowAmount = BigInt(this.belowAmount);

    // copy destinations
    if (this.destinations) {
      (0, _assert.default)(this.address === undefined && this.amount === undefined, "Tx configuration may specify destinations or an address/amount but not both");
      this.setDestinations(this.destinations.map((destination) => new _MoneroDestination.default(destination)));
    }

    // alias 'address' and 'amount' to single destination to support e.g. createTx({address: "..."})
    if (this.address || this.amount) {
      (0, _assert.default)(!this.destinations, "Tx configuration may specify destinations or an address/amount but not both");
      this.setAddress(this.address);
      this.setAmount(this.amount);
      delete this.address;
      delete this.amount;
    }

    // alias 'subaddressIndex' to subaddress indices
    if (this.subaddressIndex !== undefined) {
      this.setSubaddressIndices([this.subaddressIndex]);
      delete this.subaddressIndex;
    }
  }

  copy() {
    return new MoneroTxConfig(this);
  }

  toJson() {
    let json = Object.assign({}, this); // copy state
    if (this.getDestinations() !== undefined) {
      json.destinations = [];
      for (let destination of this.getDestinations()) json.destinations.push(destination.toJson());
    }
    if (this.getFee()) json.fee = this.getFee().toString();
    if (this.getUnlockTime()) json.unlockTime = this.getUnlockTime().toString();
    if (this.getBelowAmount()) json.belowAmount = this.getBelowAmount().toString();
    return json;
  }

  /**
   * Set the address of a single-destination configuration.
   * 
   * @param {string} address - the address to set for the single destination
   * @return {MoneroTxConfig} this configuration for chaining
   */
  setAddress(address) {
    if (this.destinations !== undefined && this.destinations.length > 1) throw new _MoneroError.default("Cannot set address because MoneroTxConfig already has multiple destinations");
    if (this.destinations === undefined || this.destinations.length === 0) this.addDestination(new _MoneroDestination.default(address));else
    this.destinations[0].setAddress(address);
    return this;
  }

  /**
   * Get the address of a single-destination configuration.
   * 
   * @return {string} the address of the single destination
   */
  getAddress() {
    if (this.destinations === undefined || this.destinations.length !== 1) throw new _MoneroError.default("Cannot get address because MoneroTxConfig does not have exactly one destination");
    return this.destinations[0].getAddress();
  }

  /**
   * Set the amount of a single-destination configuration.
   * 
   * @param {bigint} amount - the amount to set for the single destination
   * @return {MoneroTxConfig} this configuration for chaining
   */
  setAmount(amount) {
    if (amount !== undefined && typeof this.amount !== "bigint") {
      if (typeof amount === "number") throw new _MoneroError.default("Destination amount must be bigint or string");
      try {amount = BigInt(amount);}
      catch (err) {throw new _MoneroError.default("Invalid destination amount: " + amount);}
    }
    if (this.destinations !== undefined && this.destinations.length > 1) throw new _MoneroError.default("Cannot set amount because MoneroTxConfig already has multiple destinations");
    if (this.destinations === undefined || this.destinations.length === 0) this.addDestination(new _MoneroDestination.default(undefined, amount));else
    this.destinations[0].setAmount(amount);
    return this;
  }

  /**
   * Get the amount of a single-destination configuration.
   * 
   * @return {bigint} the amount of the single destination
   */
  getAmount() {
    if (this.destinations === undefined || this.destinations.length !== 1) throw new _MoneroError.default("Cannot get amount because MoneroTxConfig does not have exactly one destination");
    return this.destinations[0].getAmount();
  }

  addDestination(destinationOrAddress, amount) {
    if (typeof destinationOrAddress === "string") return this.addDestination(new _MoneroDestination.default(destinationOrAddress, amount));
    (0, _assert.default)(destinationOrAddress instanceof _MoneroDestination.default);
    if (this.destinations === undefined) this.destinations = [];
    this.destinations.push(destinationOrAddress);
    return this;
  }

  getDestinations() {
    return this.destinations;
  }

  setDestinations(destinations) {
    if (arguments.length > 1) destinations = Array.from(arguments);
    this.destinations = destinations;
    return this;
  }

  setDestination(destination) {
    return this.setDestinations(destination ? [destination] : undefined);
  }

  getSubtractFeeFrom() {
    return this.subtractFeeFrom;
  }

  setSubtractFeeFrom(destinationIndices) {
    if (arguments.length > 1) destinationIndices = Array.from(arguments);
    this.subtractFeeFrom = destinationIndices;
    return this;
  }

  getPaymentId() {
    return this.paymentId;
  }

  setPaymentId(paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  getPriority() {
    return this.priority;
  }

  setPriority(priority) {
    this.priority = priority;
    return this;
  }

  getFee() {
    return this.fee;
  }

  setFee(fee) {
    this.fee = fee;
    return this;
  }

  getAccountIndex() {
    return this.accountIndex;
  }

  setAccountIndex(accountIndex) {
    this.accountIndex = accountIndex;
    return this;
  }

  setSubaddressIndex(subaddressIndex) {
    this.setSubaddressIndices([subaddressIndex]);
    return this;
  }

  getSubaddressIndices() {
    return this.subaddressIndices;
  }

  setSubaddressIndices(subaddressIndices) {
    if (arguments.length > 1) subaddressIndices = Array.from(arguments);
    this.subaddressIndices = subaddressIndices;
    return this;
  }

  getUnlockTime() {
    return this.unlockTime;
  }

  setUnlockTime(unlockTime) {
    this.unlockTime = unlockTime;
    return this;
  }

  getRelay() {
    return this.relay;
  }

  setRelay(relay) {
    this.relay = relay;
    return this;
  }

  getCanSplit() {
    return this.canSplit;
  }

  setCanSplit(canSplit) {
    this.canSplit = canSplit;
    return this;
  }

  getNote() {
    return this.note;
  }

  setNote(note) {
    this.note = note;
    return this;
  }

  getRecipientName() {
    return this.recipientName;
  }

  setRecipientName(recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  // --------------------------- SPECIFIC TO SWEEP ----------------------------

  getBelowAmount() {
    return this.belowAmount;
  }

  setBelowAmount(belowAmount) {
    this.belowAmount = belowAmount;
    return this;
  }

  getSweepEachSubaddress() {
    return this.sweepEachSubaddress;
  }

  setSweepEachSubaddress(sweepEachSubaddress) {
    this.sweepEachSubaddress = sweepEachSubaddress;
    return this;
  }

  /**
   * Get the key image hex of the output to sweep.
   * 
   * return {string} is the key image hex of the output to sweep
   */
  getKeyImage() {
    return this.keyImage;
  }

  /**
   * Set the key image hex of the output to sweep.
   * 
   * @param {string} keyImage is the key image hex of the output to sweep
   */
  setKeyImage(keyImage) {
    this.keyImage = keyImage;
    return this;
  }
}exports.default = MoneroTxConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,