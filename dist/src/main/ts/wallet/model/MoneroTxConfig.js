"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _MoneroDestination = _interopRequireDefault(require("./MoneroDestination"));
var _MoneroError = _interopRequireDefault(require("../../common/MoneroError"));


/**
 * Configures a transaction to send, sweep, or create a payment URI.
 */
class MoneroTxConfig {

  /** Single destination address (required unless `destinations` provided). */


  /** Single destination amount (required unless `destinations provided). */


  /** Source account index to transfer funds from (required unless sweeping key image). */


  /** Source subaddress index to send funds from (default all). */


  /** Source subaddresses to send funds from (default all). */


  /** Relay the transaction to peers to commit to the blockchain if true (default false). */


  /** Transaction priority to adjust the miner fee (default MoneroTxPriority.NORMAL). */


  /** Multiple destinations to send funds to, if applicable. */


  /** List of destination indices to split the miner fee (optional). */


  /** Payment ID for the transaction. */


  /** Minimum height or timestamp for the transaction to unlock (default 0). */


  /** Miner fee (calculated automatically). */


  /** Transaction note saved locally with the wallet (optional). */


  /** Recipient name saved locally with the wallet (optional). */


  /** Allow funds to be transferred using multiple transactions if necessary (default false). */


  /** For sweep requests, include outputs below this amount when sweeping wallet, account, subaddress, or all unlocked funds. */


  /** For sweep requests, sweep each subaddress individually instead of together if true. */


  /** For sweep requests, key image of the output to sweep. */


  /**
   * <p>Generic request to transfer funds from a wallet.</p>
   * 
   * <p>Example:</p>
   * 
   * <code>
   * let config1 = new MoneroTxConfig({<br>
   * &nbsp;&nbsp; accountIndex: 0,<br>
   * &nbsp;&nbsp; address: "59aZULsUF3YN...",<br>
   * &nbsp;&nbsp; amount: BigInt("500000"),<br>
   * &nbsp;&nbsp; priority: MoneroTxPriority.NORMAL,<br>
   * &nbsp;&nbsp; relay: true<br>
   * });
   * </code>
   * 
   * @param {Partial<MoneroTxConfig>} [config] - configures the transaction to create (optional)
   * @param {string} [config.address] - single destination address
   * @param {bigint} [config.amount] - single destination amount
   * @param {number} [config.accountIndex] - source account index to transfer funds from
   * @param {number} [config.subaddressIndex] - source subaddress index to transfer funds from
   * @param {number[]} [config.subaddressIndices] - source subaddress indices to transfer funds from
   * @param {boolean} [config.relay] - relay the transaction to peers to commit to the blockchain
   * @param {MoneroTxPriority} [config.priority] - transaction priority (default MoneroTxPriority.NORMAL)
   * @param {MoneroDestination[]} [config.destinations] - addresses and amounts in a multi-destination tx
   * @param {number[]} [config.subtractFeeFrom] - list of destination indices to split the transaction fee
   * @param {string} [config.paymentId] - transaction payment ID
   * @param {bigint} [config.unlockTime] - minimum height or timestamp for the transaction to unlock (default 0)
   * @param {string} [config.note] - transaction note saved locally with the wallet
   * @param {string} [config.recipientName] - recipient name saved locally with the wallet
   * @param {boolean} [config.canSplit] - allow funds to be transferred using multiple transactions
   * @param {bigint} [config.belowAmount] - for sweep requests, include outputs below this amount when sweeping wallet, account, subaddress, or all unlocked funds 
   * @param {boolean} [config.sweepEachSubaddress] - for sweep requests, sweep each subaddress individually instead of together if true
   * @param {string} [config.keyImage] - key image to sweep (ignored except in sweepOutput() requests)
   */
  constructor(config) {
    Object.assign(this, config);

    // deserialize bigints
    if (this.amount !== undefined && typeof this.amount !== "bigint") this.amount = BigInt(this.amount);
    if (this.fee !== undefined && typeof this.fee !== "bigint") this.fee = BigInt(this.fee);
    if (this.unlockTime !== undefined && typeof this.unlockTime !== "bigint") this.unlockTime = BigInt(this.unlockTime);
    if (this.belowAmount !== undefined && typeof this.belowAmount !== "bigint") this.belowAmount = BigInt(this.belowAmount);

    // copy destinations
    if (this.destinations) {
      (0, _assert.default)(this.address === undefined && this.amount === undefined, "Tx configuration may specify destinations or an address/amount but not both");
      this.setDestinations(this.destinations.map((destination) => new _MoneroDestination.default(destination)));
    }

    // alias 'address' and 'amount' to single destination to support e.g. createTx({address: "..."})
    if (this.address || this.amount) {
      (0, _assert.default)(!this.destinations, "Tx configuration may specify destinations or an address/amount but not both");
      this.setAddress(this.address);
      this.setAmount(this.amount);
      delete this.address;
      delete this.amount;
    }

    // alias 'subaddressIndex' to subaddress indices
    if (this.subaddressIndex !== undefined) {
      this.setSubaddressIndices([this.subaddressIndex]);
      delete this.subaddressIndex;
    }
  }

  copy() {
    return new MoneroTxConfig(this);
  }

  toJson() {
    let json = Object.assign({}, this); // copy state
    if (this.getDestinations() !== undefined) {
      json.destinations = [];
      for (let destination of this.getDestinations()) json.destinations.push(destination.toJson());
    }
    if (this.getFee()) json.fee = this.getFee().toString();
    if (this.getUnlockTime()) json.unlockTime = this.getUnlockTime().toString();
    if (this.getBelowAmount()) json.belowAmount = this.getBelowAmount().toString();
    return json;
  }

  /**
   * Set the address of a single-destination configuration.
   * 
   * @param {string} address - the address to set for the single destination
   * @return {MoneroTxConfig} this configuration for chaining
   */
  setAddress(address) {
    if (this.destinations !== undefined && this.destinations.length > 1) throw new _MoneroError.default("Cannot set address because MoneroTxConfig already has multiple destinations");
    if (this.destinations === undefined || this.destinations.length === 0) this.addDestination(new _MoneroDestination.default(address));else
    this.destinations[0].setAddress(address);
    return this;
  }

  /**
   * Get the address of a single-destination configuration.
   * 
   * @return {string} the address of the single destination
   */
  getAddress() {
    if (this.destinations === undefined || this.destinations.length !== 1) throw new _MoneroError.default("Cannot get address because MoneroTxConfig does not have exactly one destination");
    return this.destinations[0].getAddress();
  }

  /**
   * Set the amount of a single-destination configuration.
   * 
   * @param {bigint} amount - the amount to set for the single destination
   * @return {MoneroTxConfig} this configuration for chaining
   */
  setAmount(amount) {
    if (amount !== undefined && typeof this.amount !== "bigint") {
      if (typeof amount === "number") throw new _MoneroError.default("Destination amount must be bigint or string");
      try {amount = BigInt(amount);}
      catch (err) {throw new _MoneroError.default("Invalid destination amount: " + amount);}
    }
    if (this.destinations !== undefined && this.destinations.length > 1) throw new _MoneroError.default("Cannot set amount because MoneroTxConfig already has multiple destinations");
    if (this.destinations === undefined || this.destinations.length === 0) this.addDestination(new _MoneroDestination.default(undefined, amount));else
    this.destinations[0].setAmount(amount);
    return this;
  }

  /**
   * Get the amount of a single-destination configuration.
   * 
   * @return {bigint} the amount of the single destination
   */
  getAmount() {
    if (this.destinations === undefined || this.destinations.length !== 1) throw new _MoneroError.default("Cannot get amount because MoneroTxConfig does not have exactly one destination");
    return this.destinations[0].getAmount();
  }

  addDestination(destinationOrAddress, amount) {
    if (typeof destinationOrAddress === "string") return this.addDestination(new _MoneroDestination.default(destinationOrAddress, amount));
    (0, _assert.default)(destinationOrAddress instanceof _MoneroDestination.default);
    if (this.destinations === undefined) this.destinations = [];
    this.destinations.push(destinationOrAddress);
    return this;
  }

  getDestinations() {
    return this.destinations;
  }

  setDestinations(destinations) {
    if (arguments.length > 1) destinations = Array.from(arguments);
    this.destinations = destinations;
    return this;
  }

  setDestination(destination) {
    return this.setDestinations(destination ? [destination] : undefined);
  }

  getSubtractFeeFrom() {
    return this.subtractFeeFrom;
  }

  setSubtractFeeFrom(destinationIndices) {
    if (arguments.length > 1) destinationIndices = Array.from(arguments);
    this.subtractFeeFrom = destinationIndices;
    return this;
  }

  getPaymentId() {
    return this.paymentId;
  }

  setPaymentId(paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  getPriority() {
    return this.priority;
  }

  setPriority(priority) {
    this.priority = priority;
    return this;
  }

  getFee() {
    return this.fee;
  }

  setFee(fee) {
    this.fee = fee;
    return this;
  }

  getAccountIndex() {
    return this.accountIndex;
  }

  setAccountIndex(accountIndex) {
    this.accountIndex = accountIndex;
    return this;
  }

  setSubaddressIndex(subaddressIndex) {
    this.setSubaddressIndices([subaddressIndex]);
    return this;
  }

  getSubaddressIndices() {
    return this.subaddressIndices;
  }

  setSubaddressIndices(subaddressIndices) {
    if (arguments.length > 1) subaddressIndices = Array.from(arguments);
    this.subaddressIndices = subaddressIndices;
    return this;
  }

  getUnlockTime() {
    return this.unlockTime;
  }

  setUnlockTime(unlockTime) {
    this.unlockTime = unlockTime;
    return this;
  }

  getRelay() {
    return this.relay;
  }

  setRelay(relay) {
    this.relay = relay;
    return this;
  }

  getCanSplit() {
    return this.canSplit;
  }

  setCanSplit(canSplit) {
    this.canSplit = canSplit;
    return this;
  }

  getNote() {
    return this.note;
  }

  setNote(note) {
    this.note = note;
    return this;
  }

  getRecipientName() {
    return this.recipientName;
  }

  setRecipientName(recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  // --------------------------- SPECIFIC TO SWEEP ----------------------------

  getBelowAmount() {
    return this.belowAmount;
  }

  setBelowAmount(belowAmount) {
    this.belowAmount = belowAmount;
    return this;
  }

  getSweepEachSubaddress() {
    return this.sweepEachSubaddress;
  }

  setSweepEachSubaddress(sweepEachSubaddress) {
    this.sweepEachSubaddress = sweepEachSubaddress;
    return this;
  }

  /**
   * Get the key image hex of the output to sweep.
   * 
   * return {string} is the key image hex of the output to sweep
   */
  getKeyImage() {
    return this.keyImage;
  }

  /**
   * Set the key image hex of the output to sweep.
   * 
   * @param {string} keyImage is the key image hex of the output to sweep
   */
  setKeyImage(keyImage) {
    this.keyImage = keyImage;
    return this;
  }
}exports.default = MoneroTxConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXNzZXJ0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfTW9uZXJvRGVzdGluYXRpb24iLCJfTW9uZXJvRXJyb3IiLCJNb25lcm9UeENvbmZpZyIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiT2JqZWN0IiwiYXNzaWduIiwiYW1vdW50IiwidW5kZWZpbmVkIiwiQmlnSW50IiwiZmVlIiwidW5sb2NrVGltZSIsImJlbG93QW1vdW50IiwiZGVzdGluYXRpb25zIiwiYXNzZXJ0IiwiYWRkcmVzcyIsInNldERlc3RpbmF0aW9ucyIsIm1hcCIsImRlc3RpbmF0aW9uIiwiTW9uZXJvRGVzdGluYXRpb24iLCJzZXRBZGRyZXNzIiwic2V0QW1vdW50Iiwic3ViYWRkcmVzc0luZGV4Iiwic2V0U3ViYWRkcmVzc0luZGljZXMiLCJjb3B5IiwidG9Kc29uIiwianNvbiIsImdldERlc3RpbmF0aW9ucyIsInB1c2giLCJnZXRGZWUiLCJ0b1N0cmluZyIsImdldFVubG9ja1RpbWUiLCJnZXRCZWxvd0Ftb3VudCIsImxlbmd0aCIsIk1vbmVyb0Vycm9yIiwiYWRkRGVzdGluYXRpb24iLCJnZXRBZGRyZXNzIiwiZXJyIiwiZ2V0QW1vdW50IiwiZGVzdGluYXRpb25PckFkZHJlc3MiLCJhcmd1bWVudHMiLCJBcnJheSIsImZyb20iLCJzZXREZXN0aW5hdGlvbiIsImdldFN1YnRyYWN0RmVlRnJvbSIsInN1YnRyYWN0RmVlRnJvbSIsInNldFN1YnRyYWN0RmVlRnJvbSIsImRlc3RpbmF0aW9uSW5kaWNlcyIsImdldFBheW1lbnRJZCIsInBheW1lbnRJZCIsInNldFBheW1lbnRJZCIsImdldFByaW9yaXR5IiwicHJpb3JpdHkiLCJzZXRQcmlvcml0eSIsInNldEZlZSIsImdldEFjY291bnRJbmRleCIsImFjY291bnRJbmRleCIsInNldEFjY291bnRJbmRleCIsInNldFN1YmFkZHJlc3NJbmRleCIsImdldFN1YmFkZHJlc3NJbmRpY2VzIiwic3ViYWRkcmVzc0luZGljZXMiLCJzZXRVbmxvY2tUaW1lIiwiZ2V0UmVsYXkiLCJyZWxheSIsInNldFJlbGF5IiwiZ2V0Q2FuU3BsaXQiLCJjYW5TcGxpdCIsInNldENhblNwbGl0IiwiZ2V0Tm90ZSIsIm5vdGUiLCJzZXROb3RlIiwiZ2V0UmVjaXBpZW50TmFtZSIsInJlY2lwaWVudE5hbWUiLCJzZXRSZWNpcGllbnROYW1lIiwic2V0QmVsb3dBbW91bnQiLCJnZXRTd2VlcEVhY2hTdWJhZGRyZXNzIiwic3dlZXBFYWNoU3ViYWRkcmVzcyIsInNldFN3ZWVwRWFjaFN1YmFkZHJlc3MiLCJnZXRLZXlJbWFnZSIsImtleUltYWdlIiwic2V0S2V5SW1hZ2UiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL3RzL3dhbGxldC9tb2RlbC9Nb25lcm9UeENvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcbmltcG9ydCBNb25lcm9EZXN0aW5hdGlvbiBmcm9tIFwiLi9Nb25lcm9EZXN0aW5hdGlvblwiO1xuaW1wb3J0IE1vbmVyb0Vycm9yIGZyb20gXCIuLi8uLi9jb21tb24vTW9uZXJvRXJyb3JcIjtcbmltcG9ydCBNb25lcm9UeFByaW9yaXR5IGZyb20gXCIuL01vbmVyb1R4UHJpb3JpdHlcIjtcblxuLyoqXG4gKiBDb25maWd1cmVzIGEgdHJhbnNhY3Rpb24gdG8gc2VuZCwgc3dlZXAsIG9yIGNyZWF0ZSBhIHBheW1lbnQgVVJJLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb25lcm9UeENvbmZpZyB7XG5cbiAgLyoqIFNpbmdsZSBkZXN0aW5hdGlvbiBhZGRyZXNzIChyZXF1aXJlZCB1bmxlc3MgYGRlc3RpbmF0aW9uc2AgcHJvdmlkZWQpLiAqL1xuICBhZGRyZXNzOiBzdHJpbmc7XG5cbiAgLyoqIFNpbmdsZSBkZXN0aW5hdGlvbiBhbW91bnQgKHJlcXVpcmVkIHVubGVzcyBgZGVzdGluYXRpb25zIHByb3ZpZGVkKS4gKi9cbiAgYW1vdW50OiBiaWdpbnQ7XG5cbiAgLyoqIFNvdXJjZSBhY2NvdW50IGluZGV4IHRvIHRyYW5zZmVyIGZ1bmRzIGZyb20gKHJlcXVpcmVkIHVubGVzcyBzd2VlcGluZyBrZXkgaW1hZ2UpLiAqL1xuICBhY2NvdW50SW5kZXg6IG51bWJlcjtcblxuICAvKiogU291cmNlIHN1YmFkZHJlc3MgaW5kZXggdG8gc2VuZCBmdW5kcyBmcm9tIChkZWZhdWx0IGFsbCkuICovXG4gIHN1YmFkZHJlc3NJbmRleDogbnVtYmVyO1xuXG4gIC8qKiBTb3VyY2Ugc3ViYWRkcmVzc2VzIHRvIHNlbmQgZnVuZHMgZnJvbSAoZGVmYXVsdCBhbGwpLiAqL1xuICBzdWJhZGRyZXNzSW5kaWNlczogbnVtYmVyW107XG5cbiAgLyoqIFJlbGF5IHRoZSB0cmFuc2FjdGlvbiB0byBwZWVycyB0byBjb21taXQgdG8gdGhlIGJsb2NrY2hhaW4gaWYgdHJ1ZSAoZGVmYXVsdCBmYWxzZSkuICovXG4gIHJlbGF5OiBib29sZWFuO1xuXG4gIC8qKiBUcmFuc2FjdGlvbiBwcmlvcml0eSB0byBhZGp1c3QgdGhlIG1pbmVyIGZlZSAoZGVmYXVsdCBNb25lcm9UeFByaW9yaXR5Lk5PUk1BTCkuICovXG4gIHByaW9yaXR5OiBNb25lcm9UeFByaW9yaXR5O1xuXG4gIC8qKiBNdWx0aXBsZSBkZXN0aW5hdGlvbnMgdG8gc2VuZCBmdW5kcyB0bywgaWYgYXBwbGljYWJsZS4gKi9cbiAgZGVzdGluYXRpb25zOiBQYXJ0aWFsPE1vbmVyb0Rlc3RpbmF0aW9uPltdO1xuXG4gIC8qKiBMaXN0IG9mIGRlc3RpbmF0aW9uIGluZGljZXMgdG8gc3BsaXQgdGhlIG1pbmVyIGZlZSAob3B0aW9uYWwpLiAqL1xuICBzdWJ0cmFjdEZlZUZyb206IG51bWJlcltdO1xuXG4gIC8qKiBQYXltZW50IElEIGZvciB0aGUgdHJhbnNhY3Rpb24uICovXG4gIHBheW1lbnRJZDogc3RyaW5nO1xuXG4gIC8qKiBNaW5pbXVtIGhlaWdodCBvciB0aW1lc3RhbXAgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byB1bmxvY2sgKGRlZmF1bHQgMCkuICovXG4gIHVubG9ja1RpbWU6IGJpZ2ludDtcblxuICAvKiogTWluZXIgZmVlIChjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkpLiAqL1xuICBmZWU6IGJpZ2ludDtcblxuICAvKiogVHJhbnNhY3Rpb24gbm90ZSBzYXZlZCBsb2NhbGx5IHdpdGggdGhlIHdhbGxldCAob3B0aW9uYWwpLiAqL1xuICBub3RlOiBzdHJpbmc7XG5cbiAgLyoqIFJlY2lwaWVudCBuYW1lIHNhdmVkIGxvY2FsbHkgd2l0aCB0aGUgd2FsbGV0IChvcHRpb25hbCkuICovXG4gIHJlY2lwaWVudE5hbWU6IHN0cmluZztcblxuICAvKiogQWxsb3cgZnVuZHMgdG8gYmUgdHJhbnNmZXJyZWQgdXNpbmcgbXVsdGlwbGUgdHJhbnNhY3Rpb25zIGlmIG5lY2Vzc2FyeSAoZGVmYXVsdCBmYWxzZSkuICovXG4gIGNhblNwbGl0OiBib29sZWFuO1xuXG4gIC8qKiBGb3Igc3dlZXAgcmVxdWVzdHMsIGluY2x1ZGUgb3V0cHV0cyBiZWxvdyB0aGlzIGFtb3VudCB3aGVuIHN3ZWVwaW5nIHdhbGxldCwgYWNjb3VudCwgc3ViYWRkcmVzcywgb3IgYWxsIHVubG9ja2VkIGZ1bmRzLiAqL1xuICBiZWxvd0Ftb3VudDogYmlnaW50O1xuXG4gIC8qKiBGb3Igc3dlZXAgcmVxdWVzdHMsIHN3ZWVwIGVhY2ggc3ViYWRkcmVzcyBpbmRpdmlkdWFsbHkgaW5zdGVhZCBvZiB0b2dldGhlciBpZiB0cnVlLiAqL1xuICBzd2VlcEVhY2hTdWJhZGRyZXNzOiBib29sZWFuO1xuXG4gIC8qKiBGb3Igc3dlZXAgcmVxdWVzdHMsIGtleSBpbWFnZSBvZiB0aGUgb3V0cHV0IHRvIHN3ZWVwLiAqL1xuICBrZXlJbWFnZTogc3RyaW5nO1xuICBcbiAgLyoqXG4gICAqIDxwPkdlbmVyaWMgcmVxdWVzdCB0byB0cmFuc2ZlciBmdW5kcyBmcm9tIGEgd2FsbGV0LjwvcD5cbiAgICogXG4gICAqIDxwPkV4YW1wbGU6PC9wPlxuICAgKiBcbiAgICogPGNvZGU+XG4gICAqIGxldCBjb25maWcxID0gbmV3IE1vbmVyb1R4Q29uZmlnKHs8YnI+XG4gICAqICZuYnNwOyZuYnNwOyBhY2NvdW50SW5kZXg6IDAsPGJyPlxuICAgKiAmbmJzcDsmbmJzcDsgYWRkcmVzczogXCI1OWFaVUxzVUYzWU4uLi5cIiw8YnI+XG4gICAqICZuYnNwOyZuYnNwOyBhbW91bnQ6IEJpZ0ludChcIjUwMDAwMFwiKSw8YnI+XG4gICAqICZuYnNwOyZuYnNwOyBwcmlvcml0eTogTW9uZXJvVHhQcmlvcml0eS5OT1JNQUwsPGJyPlxuICAgKiAmbmJzcDsmbmJzcDsgcmVsYXk6IHRydWU8YnI+XG4gICAqIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqIFxuICAgKiBAcGFyYW0ge1BhcnRpYWw8TW9uZXJvVHhDb25maWc+fSBbY29uZmlnXSAtIGNvbmZpZ3VyZXMgdGhlIHRyYW5zYWN0aW9uIHRvIGNyZWF0ZSAob3B0aW9uYWwpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLmFkZHJlc3NdIC0gc2luZ2xlIGRlc3RpbmF0aW9uIGFkZHJlc3NcbiAgICogQHBhcmFtIHtiaWdpbnR9IFtjb25maWcuYW1vdW50XSAtIHNpbmdsZSBkZXN0aW5hdGlvbiBhbW91bnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtjb25maWcuYWNjb3VudEluZGV4XSAtIHNvdXJjZSBhY2NvdW50IGluZGV4IHRvIHRyYW5zZmVyIGZ1bmRzIGZyb21cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtjb25maWcuc3ViYWRkcmVzc0luZGV4XSAtIHNvdXJjZSBzdWJhZGRyZXNzIGluZGV4IHRvIHRyYW5zZmVyIGZ1bmRzIGZyb21cbiAgICogQHBhcmFtIHtudW1iZXJbXX0gW2NvbmZpZy5zdWJhZGRyZXNzSW5kaWNlc10gLSBzb3VyY2Ugc3ViYWRkcmVzcyBpbmRpY2VzIHRvIHRyYW5zZmVyIGZ1bmRzIGZyb21cbiAgICogQHBhcmFtIHtib29sZWFufSBbY29uZmlnLnJlbGF5XSAtIHJlbGF5IHRoZSB0cmFuc2FjdGlvbiB0byBwZWVycyB0byBjb21taXQgdG8gdGhlIGJsb2NrY2hhaW5cbiAgICogQHBhcmFtIHtNb25lcm9UeFByaW9yaXR5fSBbY29uZmlnLnByaW9yaXR5XSAtIHRyYW5zYWN0aW9uIHByaW9yaXR5IChkZWZhdWx0IE1vbmVyb1R4UHJpb3JpdHkuTk9STUFMKVxuICAgKiBAcGFyYW0ge01vbmVyb0Rlc3RpbmF0aW9uW119IFtjb25maWcuZGVzdGluYXRpb25zXSAtIGFkZHJlc3NlcyBhbmQgYW1vdW50cyBpbiBhIG11bHRpLWRlc3RpbmF0aW9uIHR4XG4gICAqIEBwYXJhbSB7bnVtYmVyW119IFtjb25maWcuc3VidHJhY3RGZWVGcm9tXSAtIGxpc3Qgb2YgZGVzdGluYXRpb24gaW5kaWNlcyB0byBzcGxpdCB0aGUgdHJhbnNhY3Rpb24gZmVlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLnBheW1lbnRJZF0gLSB0cmFuc2FjdGlvbiBwYXltZW50IElEXG4gICAqIEBwYXJhbSB7YmlnaW50fSBbY29uZmlnLnVubG9ja1RpbWVdIC0gbWluaW11bSBoZWlnaHQgb3IgdGltZXN0YW1wIGZvciB0aGUgdHJhbnNhY3Rpb24gdG8gdW5sb2NrIChkZWZhdWx0IDApXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY29uZmlnLm5vdGVdIC0gdHJhbnNhY3Rpb24gbm90ZSBzYXZlZCBsb2NhbGx5IHdpdGggdGhlIHdhbGxldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZy5yZWNpcGllbnROYW1lXSAtIHJlY2lwaWVudCBuYW1lIHNhdmVkIGxvY2FsbHkgd2l0aCB0aGUgd2FsbGV0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbmZpZy5jYW5TcGxpdF0gLSBhbGxvdyBmdW5kcyB0byBiZSB0cmFuc2ZlcnJlZCB1c2luZyBtdWx0aXBsZSB0cmFuc2FjdGlvbnNcbiAgICogQHBhcmFtIHtiaWdpbnR9IFtjb25maWcuYmVsb3dBbW91bnRdIC0gZm9yIHN3ZWVwIHJlcXVlc3RzLCBpbmNsdWRlIG91dHB1dHMgYmVsb3cgdGhpcyBhbW91bnQgd2hlbiBzd2VlcGluZyB3YWxsZXQsIGFjY291bnQsIHN1YmFkZHJlc3MsIG9yIGFsbCB1bmxvY2tlZCBmdW5kcyBcbiAgICogQHBhcmFtIHtib29sZWFufSBbY29uZmlnLnN3ZWVwRWFjaFN1YmFkZHJlc3NdIC0gZm9yIHN3ZWVwIHJlcXVlc3RzLCBzd2VlcCBlYWNoIHN1YmFkZHJlc3MgaW5kaXZpZHVhbGx5IGluc3RlYWQgb2YgdG9nZXRoZXIgaWYgdHJ1ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbmZpZy5rZXlJbWFnZV0gLSBrZXkgaW1hZ2UgdG8gc3dlZXAgKGlnbm9yZWQgZXhjZXB0IGluIHN3ZWVwT3V0cHV0KCkgcmVxdWVzdHMpXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWc/OiBQYXJ0aWFsPE1vbmVyb1R4Q29uZmlnPikge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgY29uZmlnKTtcblxuICAgIC8vIGRlc2VyaWFsaXplIGJpZ2ludHNcbiAgICBpZiAodGhpcy5hbW91bnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdGhpcy5hbW91bnQgIT09IFwiYmlnaW50XCIpIHRoaXMuYW1vdW50ID0gQmlnSW50KHRoaXMuYW1vdW50KTtcbiAgICBpZiAodGhpcy5mZWUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdGhpcy5mZWUgIT09IFwiYmlnaW50XCIpIHRoaXMuZmVlID0gQmlnSW50KHRoaXMuZmVlKTtcbiAgICBpZiAodGhpcy51bmxvY2tUaW1lICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHRoaXMudW5sb2NrVGltZSAhPT0gXCJiaWdpbnRcIikgdGhpcy51bmxvY2tUaW1lID0gQmlnSW50KHRoaXMudW5sb2NrVGltZSk7XG4gICAgaWYgKHRoaXMuYmVsb3dBbW91bnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdGhpcy5iZWxvd0Ftb3VudCAhPT0gXCJiaWdpbnRcIikgdGhpcy5iZWxvd0Ftb3VudCA9IEJpZ0ludCh0aGlzLmJlbG93QW1vdW50KTtcblxuICAgIC8vIGNvcHkgZGVzdGluYXRpb25zXG4gICAgaWYgKHRoaXMuZGVzdGluYXRpb25zKSB7XG4gICAgICBhc3NlcnQodGhpcy5hZGRyZXNzID09PSB1bmRlZmluZWQgJiYgdGhpcy5hbW91bnQgPT09IHVuZGVmaW5lZCwgXCJUeCBjb25maWd1cmF0aW9uIG1heSBzcGVjaWZ5IGRlc3RpbmF0aW9ucyBvciBhbiBhZGRyZXNzL2Ftb3VudCBidXQgbm90IGJvdGhcIik7XG4gICAgICB0aGlzLnNldERlc3RpbmF0aW9ucyh0aGlzLmRlc3RpbmF0aW9ucy5tYXAoZGVzdGluYXRpb24gPT4gbmV3IE1vbmVyb0Rlc3RpbmF0aW9uKGRlc3RpbmF0aW9uKSkpO1xuICAgIH1cbiAgICBcbiAgICAvLyBhbGlhcyAnYWRkcmVzcycgYW5kICdhbW91bnQnIHRvIHNpbmdsZSBkZXN0aW5hdGlvbiB0byBzdXBwb3J0IGUuZy4gY3JlYXRlVHgoe2FkZHJlc3M6IFwiLi4uXCJ9KVxuICAgIGlmICh0aGlzLmFkZHJlc3MgfHwgdGhpcy5hbW91bnQpIHtcbiAgICAgIGFzc2VydCghdGhpcy5kZXN0aW5hdGlvbnMsIFwiVHggY29uZmlndXJhdGlvbiBtYXkgc3BlY2lmeSBkZXN0aW5hdGlvbnMgb3IgYW4gYWRkcmVzcy9hbW91bnQgYnV0IG5vdCBib3RoXCIpO1xuICAgICAgdGhpcy5zZXRBZGRyZXNzKHRoaXMuYWRkcmVzcyk7XG4gICAgICB0aGlzLnNldEFtb3VudCh0aGlzLmFtb3VudCk7XG4gICAgICBkZWxldGUgdGhpcy5hZGRyZXNzO1xuICAgICAgZGVsZXRlIHRoaXMuYW1vdW50O1xuICAgIH1cbiAgICBcbiAgICAvLyBhbGlhcyAnc3ViYWRkcmVzc0luZGV4JyB0byBzdWJhZGRyZXNzIGluZGljZXNcbiAgICBpZiAodGhpcy5zdWJhZGRyZXNzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zZXRTdWJhZGRyZXNzSW5kaWNlcyhbdGhpcy5zdWJhZGRyZXNzSW5kZXhdKTtcbiAgICAgIGRlbGV0ZSB0aGlzLnN1YmFkZHJlc3NJbmRleDtcbiAgICB9XG4gIH1cbiAgXG4gIGNvcHkoKTogTW9uZXJvVHhDb25maWcge1xuICAgIHJldHVybiBuZXcgTW9uZXJvVHhDb25maWcodGhpcyk7XG4gIH1cbiAgXG4gIHRvSnNvbigpOiBhbnkge1xuICAgIGxldCBqc29uOiBhbnkgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzKTsgLy8gY29weSBzdGF0ZVxuICAgIGlmICh0aGlzLmdldERlc3RpbmF0aW9ucygpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGpzb24uZGVzdGluYXRpb25zID0gW107XG4gICAgICBmb3IgKGxldCBkZXN0aW5hdGlvbiBvZiB0aGlzLmdldERlc3RpbmF0aW9ucygpKSBqc29uLmRlc3RpbmF0aW9ucy5wdXNoKGRlc3RpbmF0aW9uLnRvSnNvbigpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZ2V0RmVlKCkpIGpzb24uZmVlID0gdGhpcy5nZXRGZWUoKS50b1N0cmluZygpO1xuICAgIGlmICh0aGlzLmdldFVubG9ja1RpbWUoKSkganNvbi51bmxvY2tUaW1lID0gdGhpcy5nZXRVbmxvY2tUaW1lKCkudG9TdHJpbmcoKTtcbiAgICBpZiAodGhpcy5nZXRCZWxvd0Ftb3VudCgpKSBqc29uLmJlbG93QW1vdW50ID0gdGhpcy5nZXRCZWxvd0Ftb3VudCgpLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBTZXQgdGhlIGFkZHJlc3Mgb2YgYSBzaW5nbGUtZGVzdGluYXRpb24gY29uZmlndXJhdGlvbi5cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gdGhlIGFkZHJlc3MgdG8gc2V0IGZvciB0aGUgc2luZ2xlIGRlc3RpbmF0aW9uXG4gICAqIEByZXR1cm4ge01vbmVyb1R4Q29uZmlnfSB0aGlzIGNvbmZpZ3VyYXRpb24gZm9yIGNoYWluaW5nXG4gICAqL1xuICBzZXRBZGRyZXNzKGFkZHJlc3M6IHN0cmluZyk6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICBpZiAodGhpcy5kZXN0aW5hdGlvbnMgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmRlc3RpbmF0aW9ucy5sZW5ndGggPiAxKSB0aHJvdyBuZXcgTW9uZXJvRXJyb3IoXCJDYW5ub3Qgc2V0IGFkZHJlc3MgYmVjYXVzZSBNb25lcm9UeENvbmZpZyBhbHJlYWR5IGhhcyBtdWx0aXBsZSBkZXN0aW5hdGlvbnNcIik7XG4gICAgaWYgKHRoaXMuZGVzdGluYXRpb25zID09PSB1bmRlZmluZWQgfHwgdGhpcy5kZXN0aW5hdGlvbnMubGVuZ3RoID09PSAwKSB0aGlzLmFkZERlc3RpbmF0aW9uKG5ldyBNb25lcm9EZXN0aW5hdGlvbihhZGRyZXNzKSk7XG4gICAgZWxzZSAodGhpcy5kZXN0aW5hdGlvbnNbMF0gYXMgTW9uZXJvRGVzdGluYXRpb24pLnNldEFkZHJlc3MoYWRkcmVzcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZXQgdGhlIGFkZHJlc3Mgb2YgYSBzaW5nbGUtZGVzdGluYXRpb24gY29uZmlndXJhdGlvbi5cbiAgICogXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGFkZHJlc3Mgb2YgdGhlIHNpbmdsZSBkZXN0aW5hdGlvblxuICAgKi9cbiAgZ2V0QWRkcmVzcygpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLmRlc3RpbmF0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuZGVzdGluYXRpb25zLmxlbmd0aCAhPT0gMSkgdGhyb3cgbmV3IE1vbmVyb0Vycm9yKFwiQ2Fubm90IGdldCBhZGRyZXNzIGJlY2F1c2UgTW9uZXJvVHhDb25maWcgZG9lcyBub3QgaGF2ZSBleGFjdGx5IG9uZSBkZXN0aW5hdGlvblwiKTtcbiAgICByZXR1cm4gKHRoaXMuZGVzdGluYXRpb25zWzBdIGFzIE1vbmVyb0Rlc3RpbmF0aW9uKS5nZXRBZGRyZXNzKCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBTZXQgdGhlIGFtb3VudCBvZiBhIHNpbmdsZS1kZXN0aW5hdGlvbiBjb25maWd1cmF0aW9uLlxuICAgKiBcbiAgICogQHBhcmFtIHtiaWdpbnR9IGFtb3VudCAtIHRoZSBhbW91bnQgdG8gc2V0IGZvciB0aGUgc2luZ2xlIGRlc3RpbmF0aW9uXG4gICAqIEByZXR1cm4ge01vbmVyb1R4Q29uZmlnfSB0aGlzIGNvbmZpZ3VyYXRpb24gZm9yIGNoYWluaW5nXG4gICAqL1xuICBzZXRBbW91bnQoYW1vdW50OiBiaWdpbnQpOiBNb25lcm9UeENvbmZpZyB7XG4gICAgaWYgKGFtb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB0aGlzLmFtb3VudCAhPT0gXCJiaWdpbnRcIikge1xuICAgICAgaWYgKHR5cGVvZiBhbW91bnQgPT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBNb25lcm9FcnJvcihcIkRlc3RpbmF0aW9uIGFtb3VudCBtdXN0IGJlIGJpZ2ludCBvciBzdHJpbmdcIik7XG4gICAgICB0cnkgeyBhbW91bnQgPSBCaWdJbnQoYW1vdW50KTsgfVxuICAgICAgY2F0Y2ggKGVycikgeyB0aHJvdyBuZXcgTW9uZXJvRXJyb3IoXCJJbnZhbGlkIGRlc3RpbmF0aW9uIGFtb3VudDogXCIgKyBhbW91bnQpOyB9XG4gICAgfVxuICAgIGlmICh0aGlzLmRlc3RpbmF0aW9ucyAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZGVzdGluYXRpb25zLmxlbmd0aCA+IDEpIHRocm93IG5ldyBNb25lcm9FcnJvcihcIkNhbm5vdCBzZXQgYW1vdW50IGJlY2F1c2UgTW9uZXJvVHhDb25maWcgYWxyZWFkeSBoYXMgbXVsdGlwbGUgZGVzdGluYXRpb25zXCIpO1xuICAgIGlmICh0aGlzLmRlc3RpbmF0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuZGVzdGluYXRpb25zLmxlbmd0aCA9PT0gMCkgdGhpcy5hZGREZXN0aW5hdGlvbihuZXcgTW9uZXJvRGVzdGluYXRpb24odW5kZWZpbmVkLCBhbW91bnQpKTtcbiAgICBlbHNlICh0aGlzLmRlc3RpbmF0aW9uc1swXSBhcyBNb25lcm9EZXN0aW5hdGlvbikuc2V0QW1vdW50KGFtb3VudCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZXQgdGhlIGFtb3VudCBvZiBhIHNpbmdsZS1kZXN0aW5hdGlvbiBjb25maWd1cmF0aW9uLlxuICAgKiBcbiAgICogQHJldHVybiB7YmlnaW50fSB0aGUgYW1vdW50IG9mIHRoZSBzaW5nbGUgZGVzdGluYXRpb25cbiAgICovXG4gIGdldEFtb3VudCgpOiBiaWdpbnQge1xuICAgIGlmICh0aGlzLmRlc3RpbmF0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuZGVzdGluYXRpb25zLmxlbmd0aCAhPT0gMSkgdGhyb3cgbmV3IE1vbmVyb0Vycm9yKFwiQ2Fubm90IGdldCBhbW91bnQgYmVjYXVzZSBNb25lcm9UeENvbmZpZyBkb2VzIG5vdCBoYXZlIGV4YWN0bHkgb25lIGRlc3RpbmF0aW9uXCIpO1xuICAgIHJldHVybiAodGhpcy5kZXN0aW5hdGlvbnNbMF0gYXMgTW9uZXJvRGVzdGluYXRpb24pLmdldEFtb3VudCgpO1xuICB9XG4gIFxuICBhZGREZXN0aW5hdGlvbihkZXN0aW5hdGlvbk9yQWRkcmVzczogTW9uZXJvRGVzdGluYXRpb24gfCBzdHJpbmcsIGFtb3VudD86IGJpZ2ludCk6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uT3JBZGRyZXNzID09PSBcInN0cmluZ1wiKSByZXR1cm4gdGhpcy5hZGREZXN0aW5hdGlvbihuZXcgTW9uZXJvRGVzdGluYXRpb24oZGVzdGluYXRpb25PckFkZHJlc3MsIGFtb3VudCkpO1xuICAgIGFzc2VydChkZXN0aW5hdGlvbk9yQWRkcmVzcyBpbnN0YW5jZW9mIE1vbmVyb0Rlc3RpbmF0aW9uKTtcbiAgICBpZiAodGhpcy5kZXN0aW5hdGlvbnMgPT09IHVuZGVmaW5lZCkgdGhpcy5kZXN0aW5hdGlvbnMgPSBbXTtcbiAgICB0aGlzLmRlc3RpbmF0aW9ucy5wdXNoKGRlc3RpbmF0aW9uT3JBZGRyZXNzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgZ2V0RGVzdGluYXRpb25zKCk6IE1vbmVyb0Rlc3RpbmF0aW9uW10ge1xuICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9ucyBhcyBNb25lcm9EZXN0aW5hdGlvbltdO1xuICB9XG4gIFxuICBzZXREZXN0aW5hdGlvbnMoZGVzdGluYXRpb25zOiBNb25lcm9EZXN0aW5hdGlvbltdKTogTW9uZXJvVHhDb25maWcge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgZGVzdGluYXRpb25zID0gQXJyYXkuZnJvbShhcmd1bWVudHMpO1xuICAgIHRoaXMuZGVzdGluYXRpb25zID0gZGVzdGluYXRpb25zO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICBzZXREZXN0aW5hdGlvbihkZXN0aW5hdGlvbjogTW9uZXJvRGVzdGluYXRpb24pOiBNb25lcm9UeENvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuc2V0RGVzdGluYXRpb25zKGRlc3RpbmF0aW9uID8gW2Rlc3RpbmF0aW9uXSA6IHVuZGVmaW5lZCk7XG4gIH1cblxuICBnZXRTdWJ0cmFjdEZlZUZyb20oKTogbnVtYmVyW10ge1xuICAgIHJldHVybiB0aGlzLnN1YnRyYWN0RmVlRnJvbTtcbiAgfVxuXG4gIHNldFN1YnRyYWN0RmVlRnJvbShkZXN0aW5hdGlvbkluZGljZXM6IG51bWJlcltdKTogTW9uZXJvVHhDb25maWcge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgZGVzdGluYXRpb25JbmRpY2VzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpO1xuICAgIHRoaXMuc3VidHJhY3RGZWVGcm9tID0gZGVzdGluYXRpb25JbmRpY2VzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICBnZXRQYXltZW50SWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wYXltZW50SWQ7XG4gIH1cbiAgXG4gIHNldFBheW1lbnRJZChwYXltZW50SWQ6IHN0cmluZyk6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICB0aGlzLnBheW1lbnRJZCA9IHBheW1lbnRJZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgZ2V0UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wcmlvcml0eTtcbiAgfVxuICBcbiAgc2V0UHJpb3JpdHkocHJpb3JpdHk6IG51bWJlcik6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIGdldEZlZSgpOiBiaWdpbnQge1xuICAgIHJldHVybiB0aGlzLmZlZTtcbiAgfVxuICBcbiAgc2V0RmVlKGZlZTogYmlnaW50KTogTW9uZXJvVHhDb25maWcge1xuICAgIHRoaXMuZmVlID0gZmVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICBnZXRBY2NvdW50SW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5hY2NvdW50SW5kZXg7XG4gIH1cbiAgXG4gIHNldEFjY291bnRJbmRleChhY2NvdW50SW5kZXg6IG51bWJlcik6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICB0aGlzLmFjY291bnRJbmRleCA9IGFjY291bnRJbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgc2V0U3ViYWRkcmVzc0luZGV4KHN1YmFkZHJlc3NJbmRleDogbnVtYmVyKTogTW9uZXJvVHhDb25maWcge1xuICAgIHRoaXMuc2V0U3ViYWRkcmVzc0luZGljZXMoW3N1YmFkZHJlc3NJbmRleF0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICBnZXRTdWJhZGRyZXNzSW5kaWNlcygpOiBudW1iZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuc3ViYWRkcmVzc0luZGljZXM7XG4gIH1cbiAgXG4gIHNldFN1YmFkZHJlc3NJbmRpY2VzKHN1YmFkZHJlc3NJbmRpY2VzOiBudW1iZXJbXSk6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHN1YmFkZHJlc3NJbmRpY2VzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpO1xuICAgIHRoaXMuc3ViYWRkcmVzc0luZGljZXMgPSBzdWJhZGRyZXNzSW5kaWNlcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgZ2V0VW5sb2NrVGltZSgpOiBiaWdpbnQge1xuICAgIHJldHVybiB0aGlzLnVubG9ja1RpbWU7XG4gIH1cbiAgXG4gIHNldFVubG9ja1RpbWUodW5sb2NrVGltZTogYmlnaW50KTogTW9uZXJvVHhDb25maWcge1xuICAgIHRoaXMudW5sb2NrVGltZSA9IHVubG9ja1RpbWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIGdldFJlbGF5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJlbGF5O1xuICB9XG4gIFxuICBzZXRSZWxheShyZWxheTogYm9vbGVhbik6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICB0aGlzLnJlbGF5ID0gcmVsYXk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIGdldENhblNwbGl0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNhblNwbGl0O1xuICB9XG4gIFxuICBzZXRDYW5TcGxpdChjYW5TcGxpdDogYm9vbGVhbik6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICB0aGlzLmNhblNwbGl0ID0gY2FuU3BsaXQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIGdldE5vdGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5ub3RlO1xuICB9XG4gIFxuICBzZXROb3RlKG5vdGU6IHN0cmluZyk6IE1vbmVyb1R4Q29uZmlnIHtcbiAgICB0aGlzLm5vdGUgPSBub3RlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICBnZXRSZWNpcGllbnROYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucmVjaXBpZW50TmFtZTtcbiAgfVxuICBcbiAgc2V0UmVjaXBpZW50TmFtZShyZWNpcGllbnROYW1lOiBzdHJpbmcpOiBNb25lcm9UeENvbmZpZyB7XG4gICAgdGhpcy5yZWNpcGllbnROYW1lID0gcmVjaXBpZW50TmFtZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNQRUNJRklDIFRPIFNXRUVQIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgXG4gIGdldEJlbG93QW1vdW50KCkge1xuICAgIHJldHVybiB0aGlzLmJlbG93QW1vdW50O1xuICB9XG4gIFxuICBzZXRCZWxvd0Ftb3VudChiZWxvd0Ftb3VudCkge1xuICAgIHRoaXMuYmVsb3dBbW91bnQgPSBiZWxvd0Ftb3VudDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgZ2V0U3dlZXBFYWNoU3ViYWRkcmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy5zd2VlcEVhY2hTdWJhZGRyZXNzO1xuICB9XG4gIFxuICBzZXRTd2VlcEVhY2hTdWJhZGRyZXNzKHN3ZWVwRWFjaFN1YmFkZHJlc3MpIHtcbiAgICB0aGlzLnN3ZWVwRWFjaFN1YmFkZHJlc3MgPSBzd2VlcEVhY2hTdWJhZGRyZXNzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICogR2V0IHRoZSBrZXkgaW1hZ2UgaGV4IG9mIHRoZSBvdXRwdXQgdG8gc3dlZXAuXG4gICAqIFxuICAgKiByZXR1cm4ge3N0cmluZ30gaXMgdGhlIGtleSBpbWFnZSBoZXggb2YgdGhlIG91dHB1dCB0byBzd2VlcFxuICAgKi9cbiAgZ2V0S2V5SW1hZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMua2V5SW1hZ2U7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBTZXQgdGhlIGtleSBpbWFnZSBoZXggb2YgdGhlIG91dHB1dCB0byBzd2VlcC5cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlJbWFnZSBpcyB0aGUga2V5IGltYWdlIGhleCBvZiB0aGUgb3V0cHV0IHRvIHN3ZWVwXG4gICAqL1xuICBzZXRLZXlJbWFnZShrZXlJbWFnZSkge1xuICAgIHRoaXMua2V5SW1hZ2UgPSBrZXlJbWFnZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoieUxBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ2UsTUFBTUcsY0FBYyxDQUFDOztFQUVsQzs7O0VBR0E7OztFQUdBOzs7RUFHQTs7O0VBR0E7OztFQUdBOzs7RUFHQTs7O0VBR0E7OztFQUdBOzs7RUFHQTs7O0VBR0E7OztFQUdBOzs7RUFHQTs7O0VBR0E7OztFQUdBOzs7RUFHQTs7O0VBR0E7OztFQUdBOzs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxXQUFXQSxDQUFDQyxNQUFnQyxFQUFFO0lBQzVDQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxJQUFJLEVBQUVGLE1BQU0sQ0FBQzs7SUFFM0I7SUFDQSxJQUFJLElBQUksQ0FBQ0csTUFBTSxLQUFLQyxTQUFTLElBQUksT0FBTyxJQUFJLENBQUNELE1BQU0sS0FBSyxRQUFRLEVBQUUsSUFBSSxDQUFDQSxNQUFNLEdBQUdFLE1BQU0sQ0FBQyxJQUFJLENBQUNGLE1BQU0sQ0FBQztJQUNuRyxJQUFJLElBQUksQ0FBQ0csR0FBRyxLQUFLRixTQUFTLElBQUksT0FBTyxJQUFJLENBQUNFLEdBQUcsS0FBSyxRQUFRLEVBQUUsSUFBSSxDQUFDQSxHQUFHLEdBQUdELE1BQU0sQ0FBQyxJQUFJ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