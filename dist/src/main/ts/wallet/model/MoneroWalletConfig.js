"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;
var _MoneroNetworkType = _interopRequireDefault(require("../../daemon/model/MoneroNetworkType"));
var _MoneroRpcConnection = _interopRequireDefault(require("../../common/MoneroRpcConnection"));


/**
 * Configuration to create a Monero wallet.
 */
class MoneroWalletConfig {

  /** Path to the wallet to open or create. */


  /** Password of the wallet to open or create. */


  /** Network type of the wallet to open or create. */


  /** Server config to monerod or monero-wallet-rpc. */


  /** Govern the wallet's server connection. */


  /** Seed of the wallet to ceate (random wallet created if neither seed nor keys given). */


  /** Offset to derive a new seed from the given seed to recover a secret wallet. */


  /** Indicates if the wallet seed is multisig. */


  /** Primary address of the wallet to create (only provide if restoring from keys). */


  /** Private view key of the wallet to create. */


  /** Private spend key of the wallet to create. */


  /** Block height to start scanning from (defaults to 0 unless generating random wallet). */


  /** Language of the wallet's seed phrase (defaults to "English" or auto-detected). */


  /** Specifies if the currently open RPC wallet should be saved before being closed. */


  /** Proxies wallet operations to a worker in order to not block the main thread (default true). */


  /** Node.js compatible file system to use (defaults to disk or in-memory FS if browser). */


  /** Wallet keys data to open. */


  /** Wallet cache data to open. */


  /** Number of accounts to scan (optional). */


  /** Number of subaddresses to scan per account (optional). */


  /** Command to start monero-wallet-rpc as a child process. */


  /**
   * Construct a configuration to open or create a wallet.
   * 
   * @param {Partial<MoneroWalletConfig>} [config] - MoneroWalletConfig or equivalent config object
   * @param {string} [config.path] - path of the wallet to open or create
   * @param {string} [config.password] - password of the wallet to open
   * @param {string|number} [config.networkType] - network type of the wallet to open (one of "mainnet", "testnet", "stagenet" or MoneroNetworkType.MAINNET|TESTNET|STAGENET)
   * @param {string} [config.seed] - seed of the wallet to create (optional, random wallet created if neither seed nor keys given)
   * @param {string} [config.seedOffset] - the offset used to derive a new seed from the given seed to recover a secret wallet from the seed phrase
   * @param {boolean} [config.isMultisig] - restore multisig wallet from seed
   * @param {string} [config.primaryAddress] - primary address of the wallet to create (only provide if restoring from keys)
   * @param {string} [config.privateViewKey] - private view key of the wallet to create (optional)
   * @param {string} [config.privateSpendKey] - private spend key of the wallet to create (optional)
   * @param {number} [config.restoreHeight] - block height to start scanning from (defaults to 0 unless generating random wallet)
   * @param {string} [config.language] - language of the wallet's seed phrase (defaults to "English" or auto-detected)
   * @param {number} [config.accountLookahead] -  number of accounts to scan (optional)
   * @param {number} [config.subaddressLookahead] - number of subaddresses to scan per account (optional)
   * @param {string|Partial<MoneroRpcConnection>} [config.server] - uri or MoneroRpcConnection to the wallet's server (optional)
   * @param {MoneroConnectionManager} [config.connectionManager] - manage connections to monerod (optional)
   * @param {boolean} [config.rejectUnauthorized] - reject self-signed server certificates if true (default true)
   * @param {Uint8Array} [config.keysData] - wallet keys data to open (optional)
   * @param {Uint8Array} [config.cacheData] - wallet cache data to open (optional)
   * @param {boolean} [config.proxyToWorker] - proxies wallet operations to a worker in order to not block the main thread (default true)
   * @param {fs} [config.fs] - Node.js compatible file system to use (defaults to disk or in-memory FS if browser)
   * @param {boolean} [config.saveCurrent] - specifies if the current RPC wallet should be saved before being closed
   * @param {number} [config.accountLookahead] - number of accounts to scan (optional)
   * @param {number} [config.subaddressLookahead] - number of subaddresses to scan per account (optional)
   * @param {string[]} [config.cmd] - command to start wallet daemon (optional)
   */
  constructor(config) {
    Object.assign(this, config);

    // normalize config
    if (this.server) this.setServer(this.server);
    this.setProxyToWorker(this.proxyToWorker);
    if (this.networkType !== undefined) this.networkType = _MoneroNetworkType.default.from(this.networkType);
  }

  copy() {
    return new MoneroWalletConfig(this);
  }

  toJson() {
    let json = Object.assign({}, this);
    if (json.server) json.server = json.server.toJson();
    json.fs = undefined;
    json.connectionManager = undefined;
    return json;
  }

  getPath() {
    return this.path;
  }

  setPath(path) {
    this.path = path;
    return this;
  }

  getPassword() {
    return this.password;
  }

  setPassword(password) {
    this.password = password;
    return this;
  }

  getNetworkType() {
    return this.networkType;
  }

  setNetworkType(networkTypeOrStr) {
    this.networkType = networkTypeOrStr === undefined ? undefined : _MoneroNetworkType.default.from(networkTypeOrStr);
    return this;
  }

  getServer() {
    return this.server;
  }

  setServer(server) {
    if (server && !(server instanceof _MoneroRpcConnection.default)) server = new _MoneroRpcConnection.default(server);
    this.server = server;
    return this;
  }

  getConnectionManager() {
    return this.connectionManager;
  }

  setConnectionManager(connectionManager) {
    this.connectionManager = connectionManager;
    return this;
  }

  getSeed() {
    return this.seed;
  }

  setSeed(seed) {
    this.seed = seed;
    return this;
  }

  getSeedOffset() {
    return this.seedOffset;
  }

  setSeedOffset(seedOffset) {
    this.seedOffset = seedOffset;
    return this;
  }

  getIsMultisig() {
    return this.isMultisig;
  }

  setIsMultisig(isMultisig) {
    this.isMultisig = isMultisig;
    return this;
  }

  getPrimaryAddress() {
    return this.primaryAddress;
  }

  setPrimaryAddress(primaryAddress) {
    this.primaryAddress = primaryAddress;
    return this;
  }

  getPrivateViewKey() {
    return this.privateViewKey;
  }

  setPrivateViewKey(privateViewKey) {
    this.privateViewKey = privateViewKey;
    return this;
  }

  getPrivateSpendKey() {
    return this.privateSpendKey;
  }

  setPrivateSpendKey(privateSpendKey) {
    this.privateSpendKey = privateSpendKey;
    return this;
  }

  getRestoreHeight() {
    return this.restoreHeight;
  }

  setRestoreHeight(restoreHeight) {
    this.restoreHeight = restoreHeight;
    return this;
  }

  getLanguage() {
    return this.language;
  }

  setLanguage(language) {
    this.language = language;
    return this;
  }

  getSaveCurrent() {
    return this.saveCurrent;
  }

  setSaveCurrent(saveCurrent) {
    this.saveCurrent = saveCurrent;
    return this;
  }

  getProxyToWorker() {
    return this.proxyToWorker;
  }

  setProxyToWorker(proxyToWorker) {
    this.proxyToWorker = proxyToWorker;
    return this;
  }

  getFs() {
    return this.fs;
  }

  setFs(fs) {
    this.fs = fs;
    return this;
  }

  getKeysData() {
    return this.keysData;
  }

  setKeysData(keysData) {
    this.keysData = keysData;
    return this;
  }

  getCacheData() {
    return this.cacheData;
  }

  setCacheData(cacheData) {
    this.cacheData = cacheData;
    return this;
  }

  getAccountLookahead() {
    return this.accountLookahead;
  }

  setAccountLookahead(accountLookahead) {
    this.accountLookahead = accountLookahead;
    return this;
  }

  getSubaddressLookahead() {
    return this.subaddressLookahead;
  }

  setSubaddressLookahead(subaddressLookahead) {
    this.subaddressLookahead = subaddressLookahead;
    return this;
  }
}exports.default = MoneroWalletConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,