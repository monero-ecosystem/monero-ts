"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;

var _MoneroIncomingTransfer = _interopRequireDefault(require("./MoneroIncomingTransfer"));
var _MoneroOutgoingTransfer = _interopRequireDefault(require("./MoneroOutgoingTransfer"));
var _MoneroTransfer = _interopRequireDefault(require("./MoneroTransfer"));

var _MoneroTxQuery = _interopRequireDefault(require("./MoneroTxQuery"));
var _MoneroError = _interopRequireDefault(require("../../common/MoneroError"));

/**
 * Configuration to query wallet transfers.
 */
class MoneroTransferQuery extends _MoneroTransfer.default {










  /**
   * <p>Construct the transfer query.</p>
   * 
   * <p>Example:</p>
   * 
   * <code>
   * &sol;&sol; get incoming transfers to account 0, subaddress 1<br>
   * let transfers = await wallet.getTransfers({<br>
   * &nbsp;&nbsp; accountIndex: 0,<br>
   * &nbsp;&nbsp; subaddressIndex: 0<br>
   * });
   * </code>
   * 
   * <p>All configuration is optional.  All transfers are returned except those that don't meet criteria defined in this query.</p>
   * 
   * @param {Partial<MoneroTransferQuery>} [query] - transfer query configuration (optional)
   * @param {bigint} query.amount - get transfers with this amount
   * @param {number} query.accountIndex - get transfers to/from this account index
   * @param {number} query.subaddressIndex - get transfers to/from this subaddress index
   * @param {number[]} query.subaddressIndices - get transfers to/from these subaddress indices
   * @param {string} query.address - get transfers to/from this wallet address
   * @param {string[]} query.addresses - get transfers to/from these wallet addresses
   * @param {boolean} query.isIncoming - get transfers which are incoming if true
   * @param {boolean} query.isOutgoing - get transfers which are outgoing if true
   * @param {boolean} query.hasDestinations - get transfers with known destinations if true (destinations are only stored locally with the wallet)
   * @param {MoneroTxQuery} query.txQuery - get transfers whose tx match this tx query
   */
  constructor(query) {
    super(query);
    if (this.txQuery && !(this.txQuery instanceof _MoneroTxQuery.default)) this.txQuery = new _MoneroTxQuery.default(this.txQuery);
    if (this.txQuery) this.txQuery.setTransferQuery(this);

    // alias isOutgoing to isIncoming
    if (this.isOutgoing !== undefined) this.isIncoming = !this.isOutgoing;
    this.validate();
  }

  copy() {
    return new MoneroTransferQuery(this);
  }

  toJson() {
    let json = Object.assign({}, this, super.toJson());
    delete json.txQuery;
    return json;
  }

  getTxQuery() {
    return this.txQuery;
  }

  setTxQuery(txQuery) {
    this.txQuery = txQuery;
    if (txQuery) txQuery.setTransferQuery(this);
    return this;
  }

  getIsIncoming() {
    return this.isIncoming;
  }

  setIsIncoming(isIncoming) {
    this.isIncoming = isIncoming;
    return this;
  }

  getIsOutgoing() {
    return this.isIncoming === undefined ? undefined : !this.isIncoming;
  }

  setIsOutgoing(isOutgoing) {
    this.isIncoming = isOutgoing === undefined ? undefined : !isOutgoing;
    return this;
  }

  getAddress() {
    return this.address;
  }

  setAddress(address) {
    this.address = address;
    return this;
  }

  getAddresses() {
    return this.addresses;
  }

  setAddresses(addresses) {
    this.addresses = addresses;
    return this;
  }

  getSubaddressIndex() {
    return this.subaddressIndex;
  }

  setSubaddressIndex(subaddressIndex) {
    this.subaddressIndex = subaddressIndex;
    this.validate();
    return this;
  }

  getSubaddressIndices() {
    return this.subaddressIndices;
  }

  setSubaddressIndices(subaddressIndices) {
    this.subaddressIndices = subaddressIndices;
    this.validate();
    return this;
  }

  getDestinations() {
    return this.destinations;
  }

  setDestinations(destinations) {
    this.destinations = destinations;
    return this;
  }

  getHasDestinations() {
    return this.hasDestinations;
  }

  setHasDestinations(hasDestinations) {
    this.hasDestinations = hasDestinations;
    return this;
  }

  /**
   * Convenience method to query outputs by the locked state of their tx.
   * 
   * @param isLocked specifies if the output's tx must be locked or unlocked (optional)
   * @return {MoneroOutputQuery} this query for chaining
   */
  setIsLocked(isLocked) {
    if (this.txQuery === undefined) this.txQuery = new _MoneroTxQuery.default();
    this.getTxQuery().setIsLocked(isLocked);
    return this;
  }

  meetsCriteria(transfer, queryParent = true) {
    if (!(transfer instanceof _MoneroTransfer.default)) throw new Error("Transfer not given to MoneroTransferQuery.meetsCriteria(transfer)");

    // filter on common fields
    if (this.getIsIncoming() !== undefined && this.getIsIncoming() !== transfer.getIsIncoming()) return false;
    if (this.getIsOutgoing() !== undefined && this.getIsOutgoing() !== transfer.getIsOutgoing()) return false;
    if (this.getAmount() !== undefined && this.getAmount() !== transfer.getAmount()) return false;
    if (this.getAccountIndex() !== undefined && this.getAccountIndex() !== transfer.getAccountIndex()) return false;

    // filter on incoming fields
    if (transfer instanceof _MoneroIncomingTransfer.default) {
      if (this.getHasDestinations() !== undefined) return false;
      if (this.getAddress() !== undefined && this.getAddress() !== transfer.getAddress()) return false;
      if (this.getAddresses() !== undefined && !this.getAddresses().includes(transfer.getAddress())) return false;
      if (this.getSubaddressIndex() !== undefined && this.getSubaddressIndex() !== transfer.getSubaddressIndex()) return false;
      if (this.getSubaddressIndices() !== undefined && !this.getSubaddressIndices().includes(transfer.getSubaddressIndex())) return false;
    }

    // filter on outgoing fields
    else if (transfer instanceof _MoneroOutgoingTransfer.default) {

      // filter on addresses which must have overlap
      if (this.getAddress() !== undefined && (transfer.getAddresses() === undefined || !transfer.getAddresses().includes(this.getAddress()))) return false; // TODO: will filter all transfers that don't contain addresses (outgoing txs might not have this field initialized)
      if (this.getAddresses() !== undefined) {
        if (!transfer.getAddresses()) return false;
        if (!this.getAddresses().some((address) => transfer.getAddresses().includes(address))) return false;
      }

      // filter on subaddress indices
      if (this.getSubaddressIndex() !== undefined && (transfer.getSubaddressIndices() === undefined || !transfer.getSubaddressIndices().includes(this.getSubaddressIndex()))) return false;
      if (this.getSubaddressIndices() !== undefined) {
        if (!transfer.getSubaddressIndices()) return false;
        if (!this.getSubaddressIndices().some((subaddressIdx) => transfer.getSubaddressIndices().includes(subaddressIdx))) return false;
      }

      // filter on having destinations
      if (this.getHasDestinations() !== undefined) {
        if (this.getHasDestinations() && transfer.getDestinations() === undefined) return false;
        if (!this.getHasDestinations() && transfer.getDestinations() !== undefined) return false;
      }

      // filter on destinations TODO: start with test for this
      //    if (this.getDestionations() !== undefined && this.getDestionations() !== transfer.getDestionations()) return false;
    }

    // otherwise invalid type
    else throw new Error("Transfer must be MoneroIncomingTransfer or MoneroOutgoingTransfer");

    // filter with tx filter
    if (queryParent && this.getTxQuery() !== undefined && !this.getTxQuery().meetsCriteria(transfer.getTx())) return false;
    return true;
  }

  validate() {
    if (this.getSubaddressIndex() !== undefined && this.getSubaddressIndex() < 0) throw new _MoneroError.default("Subaddress index must be >= 0");
    if (this.getSubaddressIndices() !== undefined) for (let subaddressIdx of this.getSubaddressIndices()) if (subaddressIdx < 0) throw new _MoneroError.default("Subaddress indices must be >= 0");
  }

  // -------------------- OVERRIDE COVARIANT RETURN TYPES ---------------------

  setTx(tx) {
    super.setTx(tx);
    return this;
  }

  setAmount(amount) {
    super.setAmount(amount);
    return this;
  }

  setAccountIndex(accountIndex) {
    super.setAccountIndex(accountIndex);
    return this;
  }
}exports.default = MoneroTransferQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,