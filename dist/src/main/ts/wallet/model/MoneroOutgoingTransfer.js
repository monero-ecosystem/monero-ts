"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _assert = _interopRequireDefault(require("assert"));
var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));
var _MoneroDestination = _interopRequireDefault(require("./MoneroDestination"));
var _MoneroTransfer = _interopRequireDefault(require("./MoneroTransfer"));


/**
 * Models an outgoing transfer of funds from the wallet.
 */
class MoneroOutgoingTransfer extends _MoneroTransfer.default {





  /**
   * Construct the model.
   * 
   * @param {MoneroOutgoingTranser [transfer] existing state to initialize from (optional)
   */
  constructor(transfer) {
    super(transfer);

    // copy destinations
    if (this.destinations) {
      this.destinations = this.destinations.slice();
      for (let i = 0; i < this.destinations.length; i++) {
        this.destinations[i] = new _MoneroDestination.default(this.destinations[i]);
      }
    }
  }

  getIsIncoming() {
    return false;
  }

  getSubaddressIndices() {
    return this.subaddressIndices;
  }

  setSubaddressIndices(subaddressIndices) {
    this.subaddressIndices = subaddressIndices;
    return this;
  }

  getAddresses() {
    return this.addresses;
  }

  setAddresses(addresses) {
    this.addresses = addresses;
    return this;
  }

  getDestinations() {
    return this.destinations;
  }

  setDestinations(destinations) {
    this.destinations = destinations;
    return this;
  }

  copy() {
    return new MoneroOutgoingTransfer(this);
  }

  toJson() {
    let json = Object.assign({}, this, super.toJson()); // merge json onto inherited state
    if (this.getDestinations() !== undefined) {
      json.destinations = [];
      for (let destination of this.getDestinations()) json.destinations.push(destination.toJson());
    }
    delete json.tx; // parent tx is not serialized
    return json;
  }

  /**
   * Updates this transaction by merging the latest information from the given
   * transaction.
   * 
   * Merging can modify or build references to the transfer given so it
   * should not be re-used or it should be copied before calling this method.
   * 
   * @param transfer is the transfer to merge into this one
   */
  merge(transfer) {
    super.merge(transfer);
    (0, _assert.default)(transfer instanceof MoneroOutgoingTransfer);
    if (this === transfer) return this;
    this.setSubaddressIndices(_GenUtils.default.reconcile(this.getSubaddressIndices(), transfer.getSubaddressIndices()));
    this.setAddresses(_GenUtils.default.reconcile(this.getAddresses(), transfer.getAddresses()));
    this.setDestinations(_GenUtils.default.reconcile(this.getDestinations(), transfer.getDestinations()));
    return this;
  }

  toString(indent = 0) {
    let str = super.toString(indent) + "\n";
    str += _GenUtils.default.kvLine("Subaddress indices", this.getSubaddressIndices(), indent);
    str += _GenUtils.default.kvLine("Addresses", this.getAddresses(), indent);
    if (this.getDestinations() !== undefined) {
      str += _GenUtils.default.kvLine("Destinations", "", indent);
      for (let i = 0; i < this.getDestinations().length; i++) {
        str += _GenUtils.default.kvLine(i + 1, "", indent + 1);
        str += this.getDestinations()[i].toString(indent + 2) + "\n";
      }
    }
    return str.slice(0, str.length - 1); // strip last newline
  }

  // -------------------- OVERRIDE COVARIANT RETURN TYPES ---------------------

  setTx(tx) {
    super.setTx(tx);
    return this;
  }

  setAmount(amount) {
    super.setAmount(amount);
    return this;
  }

  setAccountIndex(accountIndex) {
    super.setAccountIndex(accountIndex);
    return this;
  }
}exports.default = MoneroOutgoingTransfer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,