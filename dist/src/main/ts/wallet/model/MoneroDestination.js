"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _GenUtils = _interopRequireDefault(require("../../common/GenUtils"));
var _MoneroError = _interopRequireDefault(require("../../common/MoneroError"));

/**
 * Models an outgoing transfer destination.
 */
class MoneroDestination {

  /** Destination address to send funds to. */


  /** Amount to send to destination address. */


  /**
   * Construct a destination to send funds to.
   * 
   * @param {Partial<MoneroDestination>|string} destinationOrAddress is a MoneroDestination or hex string to initialize from (optional)
   * @param {bigint} [amount] - the destination amount
   */
  constructor(destinationOrAddress, amount) {
    if (typeof destinationOrAddress === "string") {
      this.setAddress(destinationOrAddress);
      this.setAmount(amount);
    } else {
      if (amount !== undefined) throw new Error("Amount parameter must be undefined when initializing a MoneroDestination from a MoneroDestination");
      Object.assign(this, destinationOrAddress);
      if (this.amount && typeof this.amount !== "bigint") this.amount = BigInt(this.amount);
    }
  }

  getAddress() {
    return this.address;
  }

  setAddress(address) {
    this.address = address;
    return this;
  }

  getAmount() {
    return this.amount;
  }

  setAmount(amount) {
    if (amount !== undefined && typeof amount !== "bigint") {
      if (typeof amount === "number") throw new _MoneroError.default("Destination amount must be BigInt or string");
      try {amount = BigInt(amount);}
      catch (err) {throw new _MoneroError.default("Invalid destination amount: " + amount);}
    }
    this.amount = amount;
    return this;
  }

  copy() {
    return new MoneroDestination(this);
  }

  toJson() {
    let json = Object.assign({}, this);
    if (this.getAmount() !== undefined) json.amount = this.getAmount().toString();
    return json;
  }

  toString(indent = 0) {
    let str = _GenUtils.default.kvLine("Address", this.getAddress(), indent);
    str += _GenUtils.default.kvLine("Amount", this.getAmount() ? this.getAmount().toString() : undefined, indent);
    return str.slice(0, str.length - 1); // strip last newline
  }
}exports.default = MoneroDestination;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfR2VuVXRpbHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9Nb25lcm9FcnJvciIsIk1vbmVyb0Rlc3RpbmF0aW9uIiwiY29uc3RydWN0b3IiLCJkZXN0aW5hdGlvbk9yQWRkcmVzcyIsImFtb3VudCIsInNldEFkZHJlc3MiLCJzZXRBbW91bnQiLCJ1bmRlZmluZWQiLCJFcnJvciIsIk9iamVjdCIsImFzc2lnbiIsIkJpZ0ludCIsImdldEFkZHJlc3MiLCJhZGRyZXNzIiwiZ2V0QW1vdW50IiwiTW9uZXJvRXJyb3IiLCJlcnIiLCJjb3B5IiwidG9Kc29uIiwianNvbiIsInRvU3RyaW5nIiwiaW5kZW50Iiwic3RyIiwiR2VuVXRpbHMiLCJrdkxpbmUiLCJzbGljZSIsImxlbmd0aCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vdHMvd2FsbGV0L21vZGVsL01vbmVyb0Rlc3RpbmF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHZW5VdGlscyBmcm9tIFwiLi4vLi4vY29tbW9uL0dlblV0aWxzXCI7XG5pbXBvcnQgTW9uZXJvRXJyb3IgZnJvbSBcIi4uLy4uL2NvbW1vbi9Nb25lcm9FcnJvclwiO1xuXG4vKipcbiAqIE1vZGVscyBhbiBvdXRnb2luZyB0cmFuc2ZlciBkZXN0aW5hdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9uZXJvRGVzdGluYXRpb24ge1xuXG4gIC8qKiBEZXN0aW5hdGlvbiBhZGRyZXNzIHRvIHNlbmQgZnVuZHMgdG8uICovXG4gIGFkZHJlc3M6IHN0cmluZztcblxuICAvKiogQW1vdW50IHRvIHNlbmQgdG8gZGVzdGluYXRpb24gYWRkcmVzcy4gKi9cbiAgYW1vdW50OiBiaWdpbnQ7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIGRlc3RpbmF0aW9uIHRvIHNlbmQgZnVuZHMgdG8uXG4gICAqIFxuICAgKiBAcGFyYW0ge1BhcnRpYWw8TW9uZXJvRGVzdGluYXRpb24+fHN0cmluZ30gZGVzdGluYXRpb25PckFkZHJlc3MgaXMgYSBNb25lcm9EZXN0aW5hdGlvbiBvciBoZXggc3RyaW5nIHRvIGluaXRpYWxpemUgZnJvbSAob3B0aW9uYWwpXG4gICAqIEBwYXJhbSB7YmlnaW50fSBbYW1vdW50XSAtIHRoZSBkZXN0aW5hdGlvbiBhbW91bnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlc3RpbmF0aW9uT3JBZGRyZXNzPzogUGFydGlhbDxNb25lcm9EZXN0aW5hdGlvbj4gfCBzdHJpbmcsIGFtb3VudD86IGJpZ2ludCkge1xuICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25PckFkZHJlc3MgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRoaXMuc2V0QWRkcmVzcyhkZXN0aW5hdGlvbk9yQWRkcmVzcyk7XG4gICAgICB0aGlzLnNldEFtb3VudChhbW91bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYW1vdW50ICE9PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcihcIkFtb3VudCBwYXJhbWV0ZXIgbXVzdCBiZSB1bmRlZmluZWQgd2hlbiBpbml0aWFsaXppbmcgYSBNb25lcm9EZXN0aW5hdGlvbiBmcm9tIGEgTW9uZXJvRGVzdGluYXRpb25cIilcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGVzdGluYXRpb25PckFkZHJlc3MpO1xuICAgICAgaWYgKHRoaXMuYW1vdW50ICYmIHR5cGVvZiB0aGlzLmFtb3VudCAhPT0gXCJiaWdpbnRcIikgdGhpcy5hbW91bnQgPSBCaWdJbnQodGhpcy5hbW91bnQpO1xuICAgIH1cbiAgfVxuICBcbiAgZ2V0QWRkcmVzcygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmFkZHJlc3M7XG4gIH1cblxuICBzZXRBZGRyZXNzKGFkZHJlc3M6IHN0cmluZyB8IHVuZGVmaW5lZCk6IE1vbmVyb0Rlc3RpbmF0aW9uIHtcbiAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICBnZXRBbW91bnQoKTogYmlnaW50IHtcbiAgICByZXR1cm4gdGhpcy5hbW91bnQ7XG4gIH1cblxuICBzZXRBbW91bnQoYW1vdW50OiBiaWdpbnQpOiBNb25lcm9EZXN0aW5hdGlvbiB7XG4gICAgaWYgKGFtb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBhbW91bnQgIT09IFwiYmlnaW50XCIpIHtcbiAgICAgIGlmICh0eXBlb2YgYW1vdW50ID09PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgTW9uZXJvRXJyb3IoXCJEZXN0aW5hdGlvbiBhbW91bnQgbXVzdCBiZSBCaWdJbnQgb3Igc3RyaW5nXCIpO1xuICAgICAgdHJ5IHsgYW1vdW50ID0gQmlnSW50KGFtb3VudCk7IH1cbiAgICAgIGNhdGNoIChlcnIpIHsgdGhyb3cgbmV3IE1vbmVyb0Vycm9yKFwiSW52YWxpZCBkZXN0aW5hdGlvbiBhbW91bnQ6IFwiICsgYW1vdW50KTsgfVxuICAgIH1cbiAgICB0aGlzLmFtb3VudCA9IGFtb3VudDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvcHkoKTogTW9uZXJvRGVzdGluYXRpb24ge1xuICAgIHJldHVybiBuZXcgTW9uZXJvRGVzdGluYXRpb24odGhpcyk7XG4gIH1cbiAgXG4gIHRvSnNvbigpOiBhbnkge1xuICAgIGxldCBqc29uOiBhbnkgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzKTtcbiAgICBpZiAodGhpcy5nZXRBbW91bnQoKSAhPT0gdW5kZWZpbmVkKSBqc29uLmFtb3VudCA9IHRoaXMuZ2V0QW1vdW50KCkudG9TdHJpbmcoKTtcbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICBcbiAgdG9TdHJpbmcoaW5kZW50ID0gMCk6IHN0cmluZyB7XG4gICAgbGV0IHN0ciA9IEdlblV0aWxzLmt2TGluZShcIkFkZHJlc3NcIiwgdGhpcy5nZXRBZGRyZXNzKCksIGluZGVudCk7XG4gICAgc3RyICs9IEdlblV0aWxzLmt2TGluZShcIkFtb3VudFwiLCB0aGlzLmdldEFtb3VudCgpID8gdGhpcy5nZXRBbW91bnQoKS50b1N0cmluZygpIDogdW5kZWZpbmVkLCBpbmRlbnQpO1xuICAgIHJldHVybiBzdHIuc2xpY2UoMCwgc3RyLmxlbmd0aCAtIDEpOyAgLy8gc3RyaXAgbGFzdCBuZXdsaW5lXG4gIH1cbn0iXSwibWFwcGluZ3MiOiJ5TEFBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ2UsTUFBTUUsaUJBQWlCLENBQUM7O0VBRXJDOzs7RUFHQTs7O0VBR0E7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUNDLG9CQUEwRCxFQUFFQyxNQUFlLEVBQUU7SUFDdkYsSUFBSSxPQUFPRCxvQkFBb0IsS0FBSyxRQUFRLEVBQUU7TUFDNUMsSUFBSSxDQUFDRSxVQUFVLENBQUNGLG9CQUFvQixDQUFDO01BQ3JDLElBQUksQ0FBQ0csU0FBUyxDQUFDRixNQUFNLENBQUM7SUFDeEIsQ0FBQyxNQUFNO01BQ0wsSUFBSUEsTUFBTSxLQUFLRyxTQUFTLEVBQUUsTUFBTSxJQUFJQyxLQUFLLENBQUMsbUdBQW1HLENBQUM7TUFDOUlDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLElBQUksRUFBRVAsb0JBQW9CLENBQUM7TUFDekMsSUFBSSxJQUFJLENBQUNDLE1BQU0sSUFBSSxPQUFPLElBQUksQ0FBQ0EsTUFBTSxLQUFLLFFBQVEsRUFBRSxJQUFJLENBQUNBLE1BQU0sR0FBR08sTUFBTSxDQUFDLElBQUksQ0FBQ1AsTUFBTSxDQUFDO0lBQ3ZGO0VBQ0Y7O0VBRUFRLFVBQVVBLENBQUEsRUFBVztJQUNuQixPQUFPLElBQUksQ0FBQ0MsT0FBTztFQUNyQjs7RUFFQVIsVUFBVUEsQ0FBQ1EsT0FBMkIsRUFBcUI7SUFDekQsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLE9BQU87SUFDdEIsT0FBTyxJQUFJO0VBQ2I7O0VBRUFDLFNBQVNBLENBQUEsRUFBVztJQUNsQixPQUFPLElBQUksQ0FBQ1YsTUFBTTtFQUNwQjs7RUFFQUUsU0FBU0EsQ0FBQ0YsTUFBYyxFQUFxQjtJQUMzQyxJQUFJQSxNQUFNLEtBQUtHLFNBQVMsSUFBSSxPQUFPSCxNQUFNLEtBQUssUUFBUSxFQUFFO01BQ3RELElBQUksT0FBT0EsTUFBTSxLQUFLLFFBQVEsRUFBRSxNQUFNLElBQUlXLG9CQUFXLENBQUMsNkNBQTZDLENBQUM7TUFDcEcsSUFBSSxDQUFFWCxNQUFNLEdBQUdPLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDLENBQUU7TUFDL0IsT0FBT1ksR0FBRyxFQUFFLENBQUUsTUFBTSxJQUFJRCxvQkFBVyxDQUFDLDhCQUE4QixHQUFHWCxNQUFNLENBQUMsQ0FBRTtJQUNoRjtJQUNBLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLE9BQU8sSUFBSTtFQUNiOztFQUVBYSxJQUFJQSxDQUFBLEVBQXNCO0lBQ3hCLE9BQU8sSUFBSWhCLGlCQUFpQixDQUFDLElBQUksQ0FBQztFQUNwQzs7RUFFQWlCLE1BQU1BLENBQUEsRUFBUTtJQUNaLElBQUlDLElBQVMsR0FBR1YsTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDO0lBQ3ZDLElBQUksSUFBSSxDQUFDSSxTQUFTLENBQUMsQ0FBQyxLQUFLUCxTQUFTLEVBQUVZLElBQUksQ0FBQ2YsTUFBTSxHQUFHLElBQUksQ0FBQ1UsU0FBUyxDQUFDLENBQUMsQ0FBQ00sUUFBUSxDQUFDLENBQUM7SUFDN0UsT0FBT0QsSUFBSTtFQUNiOztFQUVBQyxRQUFRQSxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFVO0lBQzNCLElBQUlDLEdBQUcsR0FBR0MsaUJBQVEsQ0FBQ0MsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUNaLFVBQVUsQ0FBQyxDQUFDLEVBQUVTLE1BQU0sQ0FBQztJQUMvREMsR0FBRyxJQUFJQyxpQkFBUSxDQUFDQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQ1YsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQyxDQUFDLENBQUNNLFFBQVEsQ0FBQyxDQUFDLEdBQUdiLFNBQVMsRUFBRWMsTUFBTSxDQUFDO0lBQ3BHLE9BQU9DLEdBQUcsQ0FBQ0csS0FBSyxDQUFDLENBQUMsRUFBRUgsR0FBRyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBRTtFQUN4QztBQUNGLENBQUNDLE9BQUEsQ0FBQUMsT0FBQSxHQUFBM0IsaUJBQUEifQ==